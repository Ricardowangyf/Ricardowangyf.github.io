<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某科学的王先生</title>
  
  <subtitle>相逢拌酩酊,何必备芳鲜。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-28T03:38:30.359Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>王先生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac电脑Node版本降级</title>
    <link href="http://example.com/2022/03/28/Mac%E7%94%B5%E8%84%91node%E7%89%88%E6%9C%AC%E9%99%8D%E7%BA%A7/"/>
    <id>http://example.com/2022/03/28/Mac%E7%94%B5%E8%84%91node%E7%89%88%E6%9C%AC%E9%99%8D%E7%BA%A7/</id>
    <published>2022-03-27T16:00:00.000Z</published>
    <updated>2022-03-28T03:38:30.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac电脑Node版本降级"><a href="#Mac电脑Node版本降级" class="headerlink" title="Mac电脑Node版本降级"></a>Mac电脑Node版本降级</h2><p>1.安装node版本管理模块</p><pre><code class="bash">sudo npm install n -g</code></pre><p>下边步骤请根据自己需要选择</p><p>1.安装稳定版</p><pre><code class="bash">sudo n stable</code></pre><p>2.安装最新版</p><pre><code class="bash">sudo n latest</code></pre><p>3.版本降级/升级</p><pre><code class="bash">sudo n 版本号 #例如：sudo n 12.17.0</code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/03/ad7c54374717a223.jpg" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mac电脑Node版本降级&quot;&gt;&lt;a href=&quot;#Mac电脑Node版本降级&quot; class=&quot;headerlink&quot; title=&quot;Mac电脑Node版本降级&quot;&gt;&lt;/a&gt;Mac电脑Node版本降级&lt;/h2&gt;&lt;p&gt;1.安装node版本管理模块&lt;/p&gt;
&lt;pre&gt;&lt;c</summary>
      
    
    
    
    <category term="Mac  Nodejs" scheme="http://example.com/categories/Mac-Nodejs/"/>
    
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
    <category term="Nodejs" scheme="http://example.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>npm命令报错笔记整理</title>
    <link href="http://example.com/2022/03/28/npm%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2022/03/28/npm%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</id>
    <published>2022-03-27T16:00:00.000Z</published>
    <updated>2022-03-28T04:18:35.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022-3-28"><a href="#2022-3-28" class="headerlink" title="2022.3.28"></a>2022.3.28</h2><h3 id="npm-install下载依赖项时报错-fatal-unable-to-access-‘https-github-com-nhn-raphael-git-‘-Failed-to-connect"><a href="#npm-install下载依赖项时报错-fatal-unable-to-access-‘https-github-com-nhn-raphael-git-‘-Failed-to-connect" class="headerlink" title="npm install下载依赖项时报错 fatal: unable to access ‘https://github.com/nhn/raphael.git/‘: Failed to connect"></a>npm install下载依赖项时报错 fatal: unable to access ‘<a href="https://github.com/nhn/raphael.git/%E2%80%98">https://github.com/nhn/raphael.git/‘</a>: Failed to connect</h3><p><img src="https://s3.bmp.ovh/imgs/2022/03/0ebf426d1653e68c.jpg" loading="lazy"></p><p>解决方案：</p><p>1：查看一下自己的node版本，一般高版本下载会出问题，建议使用 12.17.0版本</p><p>2：网络延迟的问题，删除package.lock.json和node_modules文件夹,重新install<br>Node.js降级的方法我会写在另一篇<a href="">文章</a>内。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022-3-28&quot;&gt;&lt;a href=&quot;#2022-3-28&quot; class=&quot;headerlink&quot; title=&quot;2022.3.28&quot;&gt;&lt;/a&gt;2022.3.28&lt;/h2&gt;&lt;h3 id=&quot;npm-install下载依赖项时报错-fatal-unable-to-a</summary>
      
    
    
    
    <category term="npm" scheme="http://example.com/categories/npm/"/>
    
    
    <category term="npm" scheme="http://example.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Git报错笔记整理</title>
    <link href="http://example.com/2022/03/24/Git%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2022/03/24/Git%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</id>
    <published>2022-03-23T16:00:00.000Z</published>
    <updated>2022-03-24T02:34:36.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022-3月报错笔记整理"><a href="#2022-3月报错笔记整理" class="headerlink" title="2022.3月报错笔记整理"></a>2022.3月报错笔记整理</h2><h3 id="2022-3-24-Git报错笔记"><a href="#2022-3-24-Git报错笔记" class="headerlink" title="2022.3.24 Git报错笔记"></a>2022.3.24 Git报错笔记</h3><h4 id="git总是出现untracked-content怎么解决"><a href="#git总是出现untracked-content怎么解决" class="headerlink" title="git总是出现untracked content怎么解决"></a>git总是出现untracked content怎么解决</h4><p>在用git把本地代码同步至远端的时候出现了一个问题:<br><img src="https://s3.bmp.ovh/imgs/2022/03/8e96c5f20e050c05.jpg" loading="lazy"></p><p>报错原因:</p><p>该目录是从网上用git clone指令克隆下来的项目,原有的git数据和我本来的有冲突</p><p>cd到该目录之后用<code>ls -al</code>命令查看所有目录发现该项目下还有一个.git文件</p><p>用rm -rf .git删除之后就没有报错指令了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022-3月报错笔记整理&quot;&gt;&lt;a href=&quot;#2022-3月报错笔记整理&quot; class=&quot;headerlink&quot; title=&quot;2022.3月报错笔记整理&quot;&gt;&lt;/a&gt;2022.3月报错笔记整理&lt;/h2&gt;&lt;h3 id=&quot;2022-3-24-Git报错笔记&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令行下修改文件或文件夹名</title>
    <link href="http://example.com/2022/03/23/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D/"/>
    <id>http://example.com/2022/03/23/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8D/</id>
    <published>2022-03-22T16:00:00.000Z</published>
    <updated>2022-03-23T06:23:05.738Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><link href="themes/prism.css" rel="stylesheet" /><script src="prism.js" data-manual></script><h2 id="Linux命令行下修改文件或文件夹名"><a href="#Linux命令行下修改文件或文件夹名" class="headerlink" title="Linux命令行下修改文件或文件夹名"></a>Linux命令行下修改文件或文件夹名</h2><p>打开终端(或者ITerm)输入命令</p><pre><code class="bash">mv file1  file2  #前者是原文件名 后者是更改的文件名</code></pre><p>如图:<br><img src="https://s3.bmp.ovh/imgs/2022/03/6ff823ab17f6808c.jpg" loading="lazy"></p><p>把当前目录下的file1文件名改成file2，如果该目录下有file2，则覆盖以前的file2文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;prism.js&quot; data-manual&gt;&lt;/script&gt;

&lt;h2 id=&quot;Linux命令行下修改文</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac环境下运行Vue项目报错</title>
    <link href="http://example.com/2022/03/22/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%90%E8%A1%8CVue%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2022/03/22/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%90%E8%A1%8CVue%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99/</id>
    <published>2022-03-21T16:00:00.000Z</published>
    <updated>2022-03-22T05:48:29.474Z</updated>
    
    <content type="html"><![CDATA[<link href="themes/prism.css" rel="stylesheet" /><script src="prism.js" data-manual></script><h2 id="mac环境下运行vue项目报错sh-vue-cli-service-command-not-found"><a href="#mac环境下运行vue项目报错sh-vue-cli-service-command-not-found" class="headerlink" title="mac环境下运行vue项目报错sh: vue-cli-service: command not found"></a>mac环境下运行vue项目报错sh: vue-cli-service: command not found</h2><p>报错如图:</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/e912617b33e4c0ef.jpg" loading="lazy"></p><p>解决方案:<br>cd到项目目录下，执行命令</p><pre><code class="bash">sudo rm -rf node_modules package-lock.jsonnpm install</code></pre><p>然后根据提示输入密码。安装完成后，再次npm run dev就可以正常运行啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;prism.js&quot; data-manual&gt;&lt;/script&gt;

&lt;h2 id=&quot;mac环境下运行vue项目报错sh-vue-cli-service-co</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由组件之间传参</title>
    <link href="http://example.com/2022/03/19/Vue%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%8F%82/"/>
    <id>http://example.com/2022/03/19/Vue%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%8F%82/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2022-03-19T14:43:40.577Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="Vue路由组件之间传参"><a href="#Vue路由组件之间传参" class="headerlink" title="Vue路由组件之间传参"></a>Vue路由组件之间传参</h2><p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。通常的做法是“动态路由匹配”或者“query传参”，在组件中使用$route 来获取参数，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。</p><h2 id="route"><a href="#route" class="headerlink" title="$route"></a>$route</h2><p>组件与 <code>$route</code> 的耦合</p><p>router.js</p><pre><code class="js">import Vue from &quot;vue&quot;;import Router from &quot;vue-router&quot;;import User from &quot;./views/user&quot;;Vue.use(Router);export default new Router(&#123;  routes: [    &#123;      path: &quot;/user/:id&quot;,      name: &quot;user&quot;,      component: User    &#125;  ]&#125;);</code></pre><p>user.vue组件</p><pre><code class="js">// $route的使用，导致此组件只能使用在动态路径参数的特定url上&lt;template&gt;  &lt;div class=&quot;user&quot;&gt;    &lt;h4&gt;用户信息&lt;/h4&gt;    &lt;div&gt;userId： &#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p><strong>props</strong></p><p>通过 <code>props</code> 与组件解耦</p><p>router.js</p><pre><code class="js">import Vue from &quot;vue&quot;;import Router from &quot;vue-router&quot;;import User from &quot;./views/user&quot;;Vue.use(Router);export default new Router(&#123;  routes: [    &#123;      path: &quot;/user/:id&quot;,      name: &quot;user&quot;,      component: User,      props: true    &#125;  ]&#125;);</code></pre><p>user.vue组件</p><pre><code class="html">// 使用 props 将组件和路由解耦,可以在任何地方使用该组件，通过props通信&lt;template&gt;  &lt;div class=&quot;user&quot;&gt;    &lt;h4&gt;用户信息&lt;/h4&gt;    &lt;div&gt;userId： &#123;&#123;id&#125;&#125;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  props: [&quot;id&quot;]&#125;;&lt;/script&gt;</code></pre><p><strong>props三种使用方式</strong></p><p>user.vue组件</p><pre><code class="html">&lt;!-- 同一组件，不同路由模式 --&gt;&lt;template&gt;  &lt;div class=&quot;user&quot;&gt;    &lt;h4&gt;用户信息&lt;/h4&gt;    &lt;div&gt;userId： &#123;&#123;id&#125;&#125;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  props: [&quot;id&quot;]&#125;;&lt;/script&gt;</code></pre><p><strong>props传递 — 布尔模式</strong><br><strong>url：172.16.57.15:8080/#/user/1</strong></p><p>router.js</p><pre><code class="js">// 如果 props 被设置为 true，route.params 将会被设置为组件属性。export default new Router(&#123;  routes: [    &#123;      path: &quot;/user/:id&quot;,      name: &quot;user&quot;,      component: User,      props: true    &#125;  ]&#125;);</code></pre><p><strong>props传递 — 对象模式</strong><br><strong>url：172.16.57.15:8080/#/user</strong></p><p>router.js</p><pre><code class="js">// 当 props 是静态的时候有用。export default new Router(&#123;  routes: [    &#123;      path: &quot;/user&quot;,      name: &quot;user&quot;,      component: User,      props: &#123; id: 1 &#125;    &#125;  ]&#125;);</code></pre><p><strong>props传递 — 函数模式</strong><br><strong>url：172.16.57.15:8080/#/user?id=2</strong></p><p>router.js</p><pre><code class="js">// 可以将参数转换成另一种类型，将静态值与基于路由的值结合等等。export default new Router(&#123;  routes: [    &#123;      path: &quot;/user&quot;,      name: &quot;user&quot;,      component: User,      props: route =&gt; &#123;        return &#123; id: route.query.id &#125;;      &#125;    &#125;  ]&#125;);</code></pre><p><strong>注意</strong>： “props传递—对象模式”和“props传递—函数模式”使用props传参的时候，只能使用单个视图。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;


&lt;h2 id=&quot;Vue路由组件之间传参&quot;&gt;&lt;a href=&quot;#Vue路由组件之间传参&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Antd-vue的安装方法</title>
    <link href="http://example.com/2022/03/14/Antd-vue%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/03/14/Antd-vue%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-17T04:09:44.042Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-Antd-vue的安装方法"><a href="#1-Antd-vue的安装方法" class="headerlink" title="1. Antd-vue的安装方法"></a>1. Antd-vue的安装方法</h2><p><a href="https://www.antdv.com/docs/vue/introduce-cn/">Antd-vue</a><br><a href="https://ant.design/index-cn">Antd</a></p><p>安装方法:</p><p>推荐使用npm或者yarn方法进行安装，在开发环境中可以轻松进行测试，也可以在生产环境打包部署使用，享受yarn和npm的生态圈和工具链带来的一些好处</p><p>npm安装方法:</p><pre><code class="bash">npm install ant-design-vue --save</code></pre><p>yarn安装方法:</p><pre><code class="bash">yarn add ant-design-vue</code></pre><p>建议使用<a href="https://github.com/cnpm/cnpm">cnpm</a>来代替npm安装</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code class="bash">import Vue from &#39;vue&#39;;import &#123; DatePicker &#125; from &#39;ant-design-vue&#39;;Vue.use(DatePicker);</code></pre><p>引入样式:</p><pre><code class="bash">import &#39;ant-design-vue/dist/antd.css&#39;; or &#39;ant-design-vue/dist/antd.less&#39;</code></pre><p>然后只需从 ant-design-vue 引入模块即可，无需单独引入样式。等同于下面手动引入的方式。</p><pre><code class="bash"># babel-plugin-import 会帮助你加载 JS 和 CSSimport &#123; DatePicker &#125; from &#39;ant-design-vue&#39;;</code></pre><p>手动引入</p><pre><code class="bash">import DatePicker from &#39;ant-design-vue/lib/date-picker&#39;; # 加载 JSimport &#39;ant-design-vue/lib/date-picker/style/css&#39;; # 加载 CSS# import &#39;ant-design-vue/lib/date-picker/style&#39;;   加载 LESS</code></pre><h2 id="2-引入-ant-design-vue"><a href="#2-引入-ant-design-vue" class="headerlink" title="2. 引入 ant-design-vue"></a>2. 引入 ant-design-vue</h2><h3 id="安装脚手架工具"><a href="#安装脚手架工具" class="headerlink" title="安装脚手架工具"></a>安装脚手架工具</h3><p><a href="https://github.com/vuejs/vue-cli">vue-cli</a></p><pre><code class="bash">npm install -g @vue/cli# or yarn global add @vue/cli</code></pre><h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><p>使用命令行进行项目初始化:</p><pre><code class="bash">vue create antd-demo</code></pre><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><pre><code class="bash">npm i --save ant-design-vue</code></pre><p>完整引入</p><pre><code class="bash">import Vue from &#39;vue&#39;;import Antd from &#39;ant-design-vue&#39;;import App from &#39;./App&#39;;import &#39;ant-design-vue/dist/antd.css&#39;;Vue.config.productionTip = false;Vue.use(Antd);# eslint-disable no-newnew Vue(&#123;  el: &#39;#app&#39;,  components: &#123; App &#125;,  template: &#39;&lt;App/&gt;&#39;,&#125;);</code></pre><p>在main.js文件输入以上代码就能完成Antd的引入，但需要注意的是，样式文件需要单独引入</p><h4 id="局部导入组件"><a href="#局部导入组件" class="headerlink" title="局部导入组件"></a>局部导入组件</h4><pre><code class="bash">import Vue from &#39;vue&#39;;import &#123; Button, message &#125; from &#39;ant-design-vue&#39;;import App from &#39;./App&#39;;Vue.config.productionTip = false;# v1.1.2 Vue.component(Button.name, Button);Vue.component(Button.Group.name, Button.Group);# v1.1.3+ 自动注册Button下组件，如Button.Group Vue.use(Button);Vue.prototype.$message = message;# eslint-disable no-new new Vue(&#123;  el: &#39;#app&#39;,  components: &#123; App &#125;,  template: &#39;&lt;App/&gt;&#39;,&#125;);</code></pre><h2 id="在-vue-cli-3-中使用"><a href="#在-vue-cli-3-中使用" class="headerlink" title="在 vue-cli 3 中使用"></a>在 vue-cli 3 中使用</h2><p>使用命令行安装vue-cli,你可能需要安装<a href="https://yarn.bootcss.com/">yarn</a></p><pre><code class="bash">npm install -g @vue/cli# or yarn global add @vue/cli</code></pre><p>新建一个项目。</p><pre><code class="bash">vue create antd-demo</code></pre><p>并配置项目。</p><p>工具会自动初始化一个脚手架并安装 Vue 项目的各种必要依赖，如果在过程中出现网络问题，请尝试配置代理或使用其他 npm registry。</p><p>然后我们进入项目并启动:</p><pre><code class="bash">cd antd-demonpm run serve</code></pre><h3 id="引入Antd"><a href="#引入Antd" class="headerlink" title="引入Antd"></a>引入Antd</h3><p>这是 vue-cli 生成的默认目录结构。</p><pre><code class="bash">├── README.md├── babel.config├── package.json├── public│   ├── favicon.ico│   └── index.html├── src│   ├── assets│   │   └── logo.png│   ├── components│   │   └── HelloWorld.vue│   ├── App.vue│   └── main.js└── yarn.lock</code></pre><p>现在从 yarn 或 npm 安装并引入 ant-design-vue。</p><pre><code class="bash">yarn add ant-design-vue</code></pre><p>修改 <code>src/main.js</code>，引入 antd 的按钮组件以及全部样式文件。</p><pre><code class="js">import Vue from &#39;vue&#39;;import Button from &#39;ant-design-vue/lib/button&#39;;import &#39;ant-design-vue/dist/antd.css&#39;;import App from &#39;./App&#39;;Vue.component(Button.name, Button);Vue.config.productionTip = false;new Vue(&#123;  render: h =&gt; h(App),&#125;).$mount(&#39;#app&#39;);</code></pre><p>修改 <code>src/App.vue</code>的 template 内容。</p><pre><code class="html">&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;img src=&quot;./assets/logo.png&quot;&gt;    &lt;a-button type=&quot;primary&quot;&gt;Button&gt;&lt;/a-button&gt;  &lt;/div&gt;&lt;/template&gt;...</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;1-Antd-vue的安装方法&quot;&gt;&lt;a href=&quot;#1-Antd-vue的安装方法&quot; class=&quot;headerlink&quot; title=&quot;1. Antd-vue的安装方法&quot;&gt;&lt;/a&gt;1. Antd-vue的安装方</summary>
      
    
    
    
    <category term="Antdvue" scheme="http://example.com/categories/Antdvue/"/>
    
    
    <category term="Antd" scheme="http://example.com/tags/Antd/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>使用淘宝镜像cnpm替代npm</title>
    <link href="http://example.com/2022/03/14/%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8Fcnpm%E6%9B%BF%E4%BB%A3npm/"/>
    <id>http://example.com/2022/03/14/%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8Fcnpm%E6%9B%BF%E4%BB%A3npm/</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-17T04:08:26.296Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="使用淘宝镜像cnpm代替npm"><a href="#使用淘宝镜像cnpm代替npm" class="headerlink" title="使用淘宝镜像cnpm代替npm"></a>使用淘宝镜像cnpm代替npm</h2><p>直接用 npm 安装库非常慢，容易安装失败，简直是浪费时间，使用代理或者库镜像又比较麻烦，最好的解决方案是使用淘宝镜像 cnpm替代npm 。</p><p>使用方法：</p><p>打开ITerm或者你的终端，输入以下命令来安装cnpm：</p><pre><code class="bash">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>2.显示完成后，使用cnpm替代npm ( 命令参数完全一样），例如安装Vue：</p><pre><code class="bash">cnpm install -g @vue/cli</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h2 id=&quot;使用淘宝镜像cnpm代替npm&quot;&gt;&lt;a href=&quot;#使用淘宝镜像cnpm代替npm&quot; class=&quot;headerlink&quot; title=&quot;使用淘宝镜像cnpm代替npm&quot;&gt;&lt;/a&gt;使用淘宝镜像cnpm代替npm</summary>
      
    
    
    
    
    <category term="npm" scheme="http://example.com/tags/npm/"/>
    
    <category term="cnpm" scheme="http://example.com/tags/cnpm/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装yarn</title>
    <link href="http://example.com/2022/03/12/Mac%E5%AE%89%E8%A3%85yarn/"/>
    <id>http://example.com/2022/03/12/Mac%E5%AE%89%E8%A3%85yarn/</id>
    <published>2022-03-11T16:00:00.000Z</published>
    <updated>2022-03-22T06:19:11.431Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yarn.bootcss.com/">yarn中文文档</a><br><a href="https://yarnpkg.com/">yarn英文文档</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在学习引入Antd vue需要使用yarn来安装相关的依赖包，其实以前在学习其他东西的时候碰到过，但是当时没有做笔记，现在等于是补上了。</p><p>接下来说说在Mac上安装yarn的几种方法。</p><h2 id="1-使用homebrew-安装"><a href="#1-使用homebrew-安装" class="headerlink" title="1.使用homebrew 安装"></a>1.使用homebrew 安装</h2><pre><code class="bash">brew install yarn</code></pre><p>在长久的等待和报错之后，终于安装成功了，建议一定要在良好的网络环境下安装</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/89493cf54284d2e8.jpg" loading="lazy"></p><p>查看yarn的版本</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/a366c8a55242cb07.jpg" loading="lazy"></p><p>ok这就是第一种安装方法</p><h2 id="2-脚本安装"><a href="#2-脚本安装" class="headerlink" title="2.脚本安装"></a>2.脚本安装</h2><pre><code class="bash">curl -o- -L https://yarnpkg.com/install.sh | bash</code></pre><p>同样在长久的等待下，安装成功:</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/20e4bc256ee165e7.jpg" loading="lazy"></p><p>继续查看版本号</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/e741f86ad8f1dcd1.jpg" loading="lazy"></p><p>ok，上面两种方法都可以使用，建议要在良好的网络环境下安装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://yarn.bootcss.com/&quot;&gt;yarn中文文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn英文文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Mac" scheme="http://example.com/categories/Mac/"/>
    
    
    <category term="yarn" scheme="http://example.com/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0报错笔记整理</title>
    <link href="http://example.com/2022/03/05/Vue2.0%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2022/03/05/Vue2.0%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</id>
    <published>2022-03-04T16:00:00.000Z</published>
    <updated>2022-03-26T02:11:24.517Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="2022-3月报错笔记整理"><a href="#2022-3月报错笔记整理" class="headerlink" title="2022.3月报错笔记整理"></a>2022.3月报错笔记整理</h2><h3 id="2022-3-5-Vue报错笔记"><a href="#2022-3-5-Vue报错笔记" class="headerlink" title="2022.3.5 Vue报错笔记"></a>2022.3.5 Vue报错笔记</h3><p>Vue-cli搭建好默认项目后，想要用路由功能，但是报错:</p><pre><code class="bash">Can’t resolve ‘vue-router’ in xxxx(某路径)</code></pre><p>这是因为缺少包的原因</p><p>你可以看一下你的package.json文件中是否安装了vue-router</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/f15617d9351db180.jpg" loading="lazy"></p><p>运行命令</p><pre><code class="bash">npm install vue-router@3# 如果你的vue版本安装的是2.0，那么vue-router就要安装3.0版本## 如果你的vue版本安装的是3.0，那么vue-router就要安装4.0版本### 改变@后面的数字就行</code></pre><p>安装成功后显示</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/b566dec104fa864e.jpg" loading="lazy"></p><h3 id="2022-3-6-Vue报错笔记"><a href="#2022-3-6-Vue报错笔记" class="headerlink" title="2022.3.6 Vue报错笔记"></a>2022.3.6 Vue报错笔记</h3><h4 id="Component-name-“Vueabout”-should-always-be-multi-word"><a href="#Component-name-“Vueabout”-should-always-be-multi-word" class="headerlink" title="Component name “Vueabout” should always be multi-word"></a>Component name “Vueabout” should always be multi-word</h4><p>今天在跑Vue-router项目的时候碰到一个Bug</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/34dcc56415907b29.jpg" loading="lazy"></p><p>开始排错的时候怎么都发现不了，到百度上到处搜索，后来用百度翻译翻译出来这句话的意思：</p><p>组件名称“Vueabout”应始终为多个字母</p><p>然后我看了一下我的代码块，果然是组件的命名问题<br>原来的代码：</p><pre><code class="html">&lt;script&gt;import HelloWorld from &#39;./components/HelloWorld.vue&#39;export default &#123;  name: &#39;App&#39;,  components: &#123;    HelloWorld  &#125;&#125;&lt;/script&gt;</code></pre><p>更改后的</p><pre><code class="html">&lt;script&gt;import HelloWorld from &#39;./components/HelloWorld.vue&#39;export default &#123;  name: &#39;AppNamne&#39;,  components: &#123;    HelloWorld  &#125;&#125;&lt;/script&gt;</code></pre><p>然后我们就发现不报错了：</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/1bb0726156ff5d5d.jpg" loading="lazy"></p><p>页面也成功的运行了起来</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/fb345fc386e153db.jpg" loading="lazy"></p><h4 id="vue-运行时，报错：-gt-plan-vue-0-1-0-serve-解决方式"><a href="#vue-运行时，报错：-gt-plan-vue-0-1-0-serve-解决方式" class="headerlink" title="vue 运行时，报错： &gt; plan-vue@0.1.0 serve 解决方式"></a>vue 运行时，报错： <code>&gt; plan-vue@0.1.0 serve</code> 解决方式</h4><p>出现此问题的原因：由于长时间没有运行项目导致项目缺少依赖项,如下图:</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/007f389abe802745.jpg" loading="lazy"></p><p>解决方式：将项目中的node_modules和package-lock.json两个文件手动删除掉，然后在idea窗口中，执行npm install。重启idea即可。如下图:</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/312be75605b62bd5.jpg" loading="lazy"></p><p>删除之后重新安装依赖包</p><pre><code class="bash">npm install vue-routernpm install</code></pre><p>安装完成之后可以进入<code>package.json</code>文件查看<br><img src="https://s3.bmp.ovh/imgs/2022/03/1c4af49c72db06db.jpg" loading="lazy"></p><p>最后重新npm run serve,就会发现运行成功，如下图:</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/7f94f589294090fe.jpg" loading="lazy"></p><h3 id="2022-3-7-Vue报错笔记"><a href="#2022-3-7-Vue报错笔记" class="headerlink" title="2022.3.7 Vue报错笔记"></a>2022.3.7 Vue报错笔记</h3><h4 id="＜div＞-has-no-matching-end-tag"><a href="#＜div＞-has-no-matching-end-tag" class="headerlink" title="＜div＞ has no matching end tag."></a>＜div＞ has no matching end tag.</h4><p><img src="https://s3.bmp.ovh/imgs/2022/03/ccd14940d5422c5d.png" loading="lazy"></p><p>div标签对应结束部分没加(/)</p><h3 id="2022-3-8-Vue报错笔记"><a href="#2022-3-8-Vue报错笔记" class="headerlink" title="2022.3.8 Vue报错笔记"></a>2022.3.8 Vue报错笔记</h3><h4 id="NavigationDuplicated-Avoided-redundant-navigation-to-current-location-“h-son2”"><a href="#NavigationDuplicated-Avoided-redundant-navigation-to-current-location-“h-son2”" class="headerlink" title="NavigationDuplicated: Avoided redundant navigation to current location: “h_son2”."></a>NavigationDuplicated: Avoided redundant navigation to current location: “h_son2”.</h4><p>在VUE中路由遇到Error: Avoided redundant navigation to current location:报错显示是路由重复</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/c9b7ddb5a384f4e5.jpg" loading="lazy"></p><p>解决方法：router文件夹下面的index.js中加上下面几句代码:</p><pre><code class="js">// 解决ElementUI导航栏中的vue-router在3.0版本以上重复点菜单报错问题const originalPush = Router.prototype.pushRouter.prototype.push = function push(location) &#123;  return originalPush.call(this, location).catch(err =&gt; err)&#125;</code></pre><h3 id="2022-3-13-Vue报错笔记"><a href="#2022-3-13-Vue报错笔记" class="headerlink" title="2022.3.13 Vue报错笔记"></a>2022.3.13 Vue报错笔记</h3><h4 id="Parsing-error-Identifier-‘Button’-has-already-been-declared"><a href="#Parsing-error-Identifier-‘Button’-has-already-been-declared" class="headerlink" title="Parsing error: Identifier ‘Button’ has already been declared"></a>Parsing error: Identifier ‘Button’ has already been declared</h4><p>安装Antd Vue的时候碰到一个bug，排查之后发现是引入错误</p><p>报错内容如下:</p><p><img src="https://tva2.sinaimg.cn/large/0074R88yly8h0bnt93yotj30wu09wwho.jpg" loading="lazy"></p><p>代码部分如下:</p><pre><code class="js">  // src/main.js  import Vue from &#39;vue&#39;  import Button from &#39;ant-design-vue/lib/button&#39;;  import &#123; Button &#125; from &#39;ant-design-vue&#39;;  import &#39;ant-design-vue/dist/antd.css&#39;  import App from &#39;./App&#39;  Vue.component(Button.name, Button)  Vue.config.productionTip = false  new Vue(&#123;      render: h =&gt; h(App)  &#125;).$mount(&quot;#app&quot;);</code></pre><p>只要删除重复引入的部分就行，删除代码：</p><pre><code class="js">  // src/main.js  import Vue from &#39;vue&#39;  import &#123; Button &#125; from &#39;ant-design-vue&#39;;  import &#39;ant-design-vue/dist/antd.css&#39;  import App from &#39;./App&#39;  Vue.component(Button.name, Button)  Vue.config.productionTip = false  new Vue(&#123;      render: h =&gt; h(App)  &#125;).$mount(&quot;#app&quot;);</code></pre><p>  删除了重复引入的部分，这样代码就不会报错了:</p><p>  <img src="https://s3.bmp.ovh/imgs/2022/03/cbe870a6132c0edf.jpg" loading="lazy"></p><h3 id="2022-3-16-Vue报错笔记"><a href="#2022-3-16-Vue报错笔记" class="headerlink" title="2022.3.16 Vue报错笔记"></a>2022.3.16 Vue报错笔记</h3><h4 id="Maximum-call-stack-size-exceeded"><a href="#Maximum-call-stack-size-exceeded" class="headerlink" title="Maximum call stack size exceeded"></a>Maximum call stack size exceeded</h4><p>  在学习vuerouter的时候想把所有编写的实例放在一个页面中展示，打开Google浏览器调试 工具的时候碰到如下错误:</p><p>  <img src="https://s3.bmp.ovh/imgs/2022/03/013a9b93be2bfe59.png" loading="lazy"></p><p>  百度翻译过来的内容是:</p><p>  超出了最大调用堆栈大小</p><p>  仔细检查页面后发现</p><pre><code class="html">&lt;template&gt;&lt;div&gt;  &lt;hr /&gt;  &lt;HistoryApp&gt;&lt;/HistoryApp&gt;  &lt;hr /&gt;  &lt;App&gt;&lt;/App&gt;  &lt;hr /&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HistoryApp from &quot;./components/history/HistoryApp.vue&quot;;import App from &quot;./components/App.vue&quot;;export default &#123;name:&#39;HistoryApp&#39;,components: &#123;  HistoryApp,  App,&#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;hr &#123;border: 1px solid red;&#125;div&#123;text-align: center;&#125;&lt;/style&gt;</code></pre><p>发现页面引用了一个组件 和页面的<code>name</code>重复。所以进入页面的时候，一直都在死循环。</p><p>修改如下</p><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;hr /&gt;    &lt;HistoryApp&gt;&lt;/HistoryApp&gt;    &lt;hr /&gt;    &lt;App&gt;&lt;/App&gt;    &lt;hr /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HistoryApp from &quot;./components/history/HistoryApp.vue&quot;;import App from &quot;./components/App.vue&quot;;export default &#123;  component: &#123;    HistoryApp,    App,  &#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;hr &#123;  border: 1px solid red;&#125;div&#123;  text-align: center;&#125;&lt;/style&gt;</code></pre><h3 id="2022-3-18-Vue报错笔记"><a href="#2022-3-18-Vue报错笔记" class="headerlink" title="2022.3.18 Vue报错笔记"></a>2022.3.18 Vue报错笔记</h3><h4 id="did-you-register-the-component-correctly-For-recursive-components-make-sure-to-provide-the-“name”-option"><a href="#did-you-register-the-component-correctly-For-recursive-components-make-sure-to-provide-the-“name”-option" class="headerlink" title=" - did you register the component correctly? For recursive components, make sure to provide the “name” option."></a><BarApp> - did you register the component correctly? For recursive components, make sure to provide the “name” option.</h4><p>今天学习vue-router的时候碰到一个bug，浏览器报错如下：</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/142b3a8aad79caf1.jpg" loading="lazy"></p><p><strong>重点</strong></p><p><strong>其实是我的components单词写错了</strong></p><p>我以为又是什么很难的问题，结果就是一个少写一个字母的问题  = - =  哭死</p><p>修改之后如下图:</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/bdceb5101f4493a4.jpg" loading="lazy"></p><h3 id="2022-3-19-Vue报错笔记"><a href="#2022-3-19-Vue报错笔记" class="headerlink" title="2022.3.19 Vue报错笔记"></a>2022.3.19 Vue报错笔记</h3><h4 id="Route-with-name-‘-Login’-does-not-exist"><a href="#Route-with-name-‘-Login’-does-not-exist" class="headerlink" title="Route with name ‘/Login’ does not exist"></a>Route with name ‘/Login’ does not exist</h4><p>今天学习vue-router内容中的重定向碰到一个bug，浏览器报错如下：</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/cd715bd2980f84aa.jpg" loading="lazy"></p><p>路由地址不存在<br>找到路由配置文件router.js</p><p>解决方法:</p><pre><code class="bash">&#123;    path: &#39;/home&#39;,    name: &#39;home&#39;,    component: home,&#125;</code></pre><h3 id="2022-3-23-Vue2-0报错笔记"><a href="#2022-3-23-Vue2-0报错笔记" class="headerlink" title="2022.3.23  Vue2.0报错笔记"></a>2022.3.23  Vue2.0报错笔记</h3><h4 id="You-are-using-the-runtime-only-build-of-Vue-where-the-template-compiler-is-not-available-Either-pre-compile-the-templates-into-render-functions-or-use-the-compiler-included-build"><a href="#You-are-using-the-runtime-only-build-of-Vue-where-the-template-compiler-is-not-available-Either-pre-compile-the-templates-into-render-functions-or-use-the-compiler-included-build" class="headerlink" title="You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build."></a>You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</h4><p>今天写vue路由项目碰到一个bug，浏览器报错如下：</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/9976d3b3e49aceea.jpg" loading="lazy"></p><p>报错原因:</p><p>vue有两种形式的代码 compiler（模板）模式和runtime模式（运行时）vue模块的package.json的main字段默认为runtime模式， 指向了”dist/vue.runtime.common.js”位置。</p><p>这是我main.js文件中初始化的vue块，这种形式为compiler模式，所以就会出现如上的错误信息</p><pre><code class="js">// compilernew Vue(&#123;  el: &#39;#app&#39;,  router: router,  store: store,  template: &#39;&lt;App/&gt;&#39;,  components: &#123; App &#125;&#125;)</code></pre><p>解决办法</p><p>main.js中修改成如下格式就行:</p><pre><code class="js">//runtimenew Vue(&#123;  router,  store,  render: h =&gt; h(App)&#125;).$mount(&quot;#app&quot;)</code></pre><h3 id="2022-3-26-Vue2-0报错笔记"><a href="#2022-3-26-Vue2-0报错笔记" class="headerlink" title="2022.3.26  Vue2.0报错笔记"></a>2022.3.26  Vue2.0报错笔记</h3><h4 id="Non-nested-routes-must-include-a-leading-slash-character-Fix-the-following-routes"><a href="#Non-nested-routes-must-include-a-leading-slash-character-Fix-the-following-routes" class="headerlink" title="Non-nested routes must include a leading slash character. Fix the following routes"></a>Non-nested routes must include a leading slash character. Fix the following routes</h4><p>出错点<br>Non-nested routes must include a leading slash character. Fix the following routes:<br>非嵌套路由必须包含前导斜杠字符</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/de90c863bf7c9b7b.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;2022-3月报错笔记整理&quot;&gt;&lt;a href=&quot;#2022-3月报错笔记整理&quot; class=&quot;h</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac下访问github网址速度慢或者无法访问方案</title>
    <link href="http://example.com/2022/03/02/Mac%E4%B8%8B%E8%AE%BF%E9%97%AEgithub%E7%BD%91%E5%9D%80%E9%80%9F%E5%BA%A6%E6%85%A2%E6%88%96%E8%80%85%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2022/03/02/Mac%E4%B8%8B%E8%AE%BF%E9%97%AEgithub%E7%BD%91%E5%9D%80%E9%80%9F%E5%BA%A6%E6%85%A2%E6%88%96%E8%80%85%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E6%96%B9%E6%A1%88/</id>
    <published>2022-03-01T16:00:00.000Z</published>
    <updated>2022-03-22T06:18:59.668Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="Mac下访问github网址速度慢或者无法访问方案"><a href="#Mac下访问github网址速度慢或者无法访问方案" class="headerlink" title="Mac下访问github网址速度慢或者无法访问方案"></a>Mac下访问github网址速度慢或者无法访问方案</h2><p>最近想用Mac电脑访问github发现一直登不上去,梯子太贵消费不起，常用的几个梯子基本都挂了，一直在网上搜寻解决方案，终于，结合两篇文章解决了<br>虽然访问依旧很慢，但是至少不需要梯子就能上github了</p><p>1.打开访达窗口，按住<code>shift command G</code>三个键，进入搜索文件夹的页面<br><img src="https://tva3.sinaimg.cn/large/0074R88yly8gzvxxhn4z0j30gm04zaa8.jpg" loading="lazy"></p><p>2.输入框内输入/etc/hosts<br><img src="https://tva3.sinaimg.cn/large/0074R88yly8gzvy0sbky9j30gr04zq35.jpg" loading="lazy"></p><p>3.找到hosts文件<br><img src="https://s3.bmp.ovh/imgs/2022/03/b70711d5471fdfc3.jpg" loading="lazy"></p><p>4.由于hosts文件夹不可编辑，所以复制一份hosts文件先保存到本地桌面<br>注：修改或者变更hosts文件需要输入你的开机密码</p><p>5.在新的hosts文件夹里输入如下内容：</p><pre><code class="bash">151.101.185.194 github.global.ssl.fastly.net140.82.114.4 github.com 151.101.112.133 assets-cdn.github.com 151.101.184.133 assets-cdn.github.com 185.199.108.153 documentcloud.github.com 192.30.253.118 gist.github.com185.199.108.153 help.github.com 192.30.253.120 nodeload.github.com 151.101.112.133 raw.github.com 23.21.63.56 status.github.com 192.30.253.1668 training.github.com 192.30.253.112 www.github.com 151.101.13.194 github.global.ssl.fastly.net 151.101.12.133 avatars0.githubusercontent.com 151.101.112.133 avatars1.githubusercontent.com</code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/03/cf87f0d6b7ec3de3.jpg" loading="lazy"></p><p>6.刷新DNS<br>输入命令:</p><pre><code class="bash">dscacheutil -flushcache</code></pre><p>7.以上完成后，我们来到终端命令行ping 一下github</p><pre><code class="bash">ping www.github.com</code></pre><p>然后我们就会发现，终于ping通了</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/1b20cfa4b50191d1.jpg" loading="lazy"></p><p>再然后我们就见到了github页面</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/232c696115e2ff6a.jpg" loading="lazy"></p><p>虽然速度很慢(不知道是不是网速的原因)，但能上就行！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;Mac下访问github网址速度慢或者无法访问方案&quot;&gt;&lt;a href=&quot;#Mac下访问githu</summary>
      
    
    
    
    <category term="Macos github" scheme="http://example.com/categories/Macos-github/"/>
    
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>安装vue-router</title>
    <link href="http://example.com/2022/03/02/%E5%AE%89%E8%A3%85vue-router/"/>
    <id>http://example.com/2022/03/02/%E5%AE%89%E8%A3%85vue-router/</id>
    <published>2022-03-01T16:00:00.000Z</published>
    <updated>2022-03-17T04:05:10.199Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="1-安装vue-router"><a href="#1-安装vue-router" class="headerlink" title="1.安装vue-router"></a>1.安装vue-router</h2><p>讲安装方法之前很关键的一点一定要记住！！！</p><p><code>vue-router 3.0 对应使用 vue 2.x</code><br><code>vue-router 4.0 对应使用 vue 3.x</code></p><p><a href="https://v3.router.vuejs.org/zh/installation.html">3.0文档</a><br><a href="https://router.vuejs.org/zh/introduction.html">4.0文档</a></p><p>1.安装vue项目</p><pre><code class="bash">vue create hello-world# 文件名称</code></pre><p>安装vue项目的具体过程可以参考我的另外一篇<a href="https://wangyufei.fun/2022/03/02/%E5%AE%89%E8%A3%85vue%E9%A1%B9%E7%9B%AE/">文章</a></p><p>2.通过如下命令安装vue-router</p><pre><code class="bash">npm install vue-router@3npm install vue-router</code></pre><p>3.查看是否安装成功</p><p>安装过后可以在<code>package.json</code>文件中查看到你的vue版本与vue-router版本</p><pre><code class="bash">  &quot;dependencies&quot;: &#123;    &quot;core-js&quot;: &quot;^3.8.3&quot;,    &quot;vue&quot;: &quot;^2.6.14&quot;,    &quot;vue-router&quot;: &quot;^3.5.3&quot;  &#125;,</code></pre><h2 id="2-下面添加一个实例"><a href="#2-下面添加一个实例" class="headerlink" title="2.下面添加一个实例"></a>2.下面添加一个实例</h2><p>1.在src目录中创建文件夹router</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/4543a1d59b4b54fa.jpg" loading="lazy"></p><p>2.在router目录中添加文件index.js</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/1f8ca267ab5fa7ad.jpg" loading="lazy"></p><p>3.修改mian.js文件</p><pre><code class="bash">import Vue from &#39;vue&#39;import App from &#39;./components/App&#39;import &#123; router &#125; from &#39;./router/index&#39;new Vue(&#123;    // el: &#39;#app&#39;,    router,    render(h) &#123;        return h(App);    &#125;&#125;).$mount(&#39;#app&#39;)</code></pre><p>4.components目录中添加文件App.vue</p><pre><code class="html">&lt;template&gt;  &lt;div class=&quot;warpper&quot;&gt;    &lt;div&gt;路由实例&lt;/div&gt;    &lt;div class=&quot;router&quot;&gt;      &lt;router-link active-class=&quot;wyf&quot; to=&quot;/&quot;&gt;首页&lt;/router-link&gt;      &lt;router-link active-class=&quot;wyf&quot; to=&quot;/good&quot;&gt;好的&lt;/router-link&gt;      &lt;router-link active-class=&quot;wyf&quot; to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;      &lt;router-link active-class=&quot;wyf&quot; to=&quot;/user/1&quot;&gt;鞋子&lt;/router-link&gt;      &lt;router-link active-class=&quot;wyf&quot; to=&quot;/user/2&quot;&gt;帽子&lt;/router-link&gt;    &lt;/div&gt;    &lt;!--定义路由插座--&gt;    &lt;router-view&gt;&lt;/router-view&gt;    &lt;div class=&quot;footer&quot;&gt;      &lt;p&gt;测试&lt;/p&gt;      &lt;div&gt;        &lt;a href=&quot;#&quot;&gt;测试1&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;测试2&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;xxxxxxxxx&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;aaaaaaaaa&lt;/a&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.warpper &#123;  max-width: 980px;  margin: 0 auto;&#125;.router &#123;  background: #e8e7e3;&#125;.router a &#123;  display: inline-block;  padding: 13px 20px;  font-weight: bold;  text-decoration: auto;&#125;.router-link-exact-active &#123;  color: #fff;  background: #3f3f3f;&#125;.footer &#123;  font-size: 12px;  text-align: center;&#125;.footer p &#123;  background: #e8e7e3;  padding: 10px 18px;&#125;.footer div a &#123;  color: #333;  padding: 0 5px;&#125;.footer div a:hover &#123;  color: #0028f3;&#125;&lt;/style&gt;</code></pre><p>5.components目录中添加文件About.vue</p><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;我是关于&lt;/h2&gt;    &lt;p&gt;xxxx&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name:&#39;about&#39;,&#125;;&lt;/script&gt;</code></pre><p>6.components目录中添加文件Good.vue</p><pre><code class="html">&lt;template&gt;  &lt;div&gt;    &lt;p&gt;Good&lt;/p&gt;   &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name:&#39;about&#39;,&#125;;&lt;/script&gt;</code></pre><p>7.components目录中添加文件Home.vue</p><pre><code class="html">&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;!-- 可以定义不变的内容 --&gt;    &lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;    &lt;!-- s可以定义不变的内容 --&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default&#123;    name:&#39;app&#39;,    data()&#123;        return&#123;            title:&#39;首页&#39;        &#125;    &#125;&#125;&lt;/script&gt;</code></pre><p>8.components目录中添加文件NotFound.vue</p><pre><code class="html">&lt;template&gt;  &lt;div class=&quot;notfound&quot;&gt;      &lt;div&gt;        &lt;h1&gt;404&lt;/h1&gt;        &lt;div&gt;            &lt;p&gt;页面不存在&lt;/p&gt;        &lt;/div&gt;      &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.notfound &#123;    text-align: center;     min-height: 200px;    display: flex;    justify-content: center;        color: #afafaf;    align-items: center;&#125;&lt;/style&gt;</code></pre><p>9.components目录中添加文件User.vue</p><pre><code class="html">&lt;template&gt;  &lt;div&gt;      User &#123;&#123; $route.params.id &#125;&#125;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name:&#39;about&#39;,&#125;;&lt;/script&gt;</code></pre><p>10.index文件中添加内容</p><pre><code class="js">import Vue from &#39;vue&#39;import Router from &#39;vue-router&#39;import About from &#39;../components/About&#39;import Good from &#39;../components/Good&#39;import Home from &#39;../components/Home&#39;import NotFound from &#39;../components/NotFound&#39;import User from &#39;../components/User&#39;export const routes = [    &#123; path: &#39;/&#39;, component: Home &#125;,    &#123; path: &#39;/about&#39;, component: About &#125;,    &#123; path: &#39;/good&#39;, component: Good &#125;,    &#123; path: &#39;/user/:id&#39;, component: User &#125;,    &#123; path: &#39;*&#39;, component: NotFound &#125;]export const router = new Router(&#123;    routes // (缩写) 相当于 routes: routes&#125;);Vue.use(Router);</code></pre><p>至此，从安装vue-router到完成第一个实例全部结束</p><p>实例运行效果图如下:</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/d33b159b6fd5b0a3.jpg" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;1-安装vue-router&quot;&gt;&lt;a href=&quot;#1-安装vue-router&quot; class=</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>安装vue项目</title>
    <link href="http://example.com/2022/03/02/%E5%AE%89%E8%A3%85vue%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/03/02/%E5%AE%89%E8%A3%85vue%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-03-01T16:00:00.000Z</published>
    <updated>2022-03-17T04:08:09.997Z</updated>
    
    <content type="html"><![CDATA[<link href="themes/prism.css" rel="stylesheet" /><script src="prism.js" data-manual></script><h1 id="如何安装vue项目"><a href="#如何安装vue项目" class="headerlink" title="如何安装vue项目"></a>如何安装vue项目</h1><p><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">Vue CLI 官网</a></p><h2 id="2022-02-26"><a href="#2022-02-26" class="headerlink" title="2022/02/26"></a>2022/02/26</h2><ol><li>检查 Vue 是否安装，如果输出 vue 的版本信息，说明安装了 vue</li></ol><pre><code class="bash">vue -V# @vue/cli 4.5.15</code></pre><p>如果不存在 vue 命令工具，<a href="https://cli.vuejs.org/zh/guide/installation.html">安装 vue 命令</a></p><pre><code class="bash">npm install -g @vue/cli# ORyarn global add @vue/cli</code></pre><ol start="2"><li>通过 vue 命令，创建一个 <code>hello-world</code> 项目</li></ol><pre><code class="bash">vue create hello-world</code></pre><p>选择 Vue 版本, 通过上下键选择 <code>Default ([Vue 2] babel, eslint)</code></p><pre><code class="bash"># Vue CLI v4.5.15# ? Please pick a preset: (Use arrow keys)# ❯ Default ([Vue 2] babel, eslint)#   Default (Vue 3) ([Vue 3] babel, eslint)#   Manually select features</code></pre><p>选择安装，如果成功输出下面内容，如果失败，查看命令行信息，重新安装</p><pre><code class="bash"># Vue CLI v4.5.15# ✨  Creating project in /Users/wangyufei/git-project/FD/hello-world.# 🗃  Initializing git repository...# ⚙️  Installing CLI plugins. This might take a while...# added 1280 packages in 39s# 11 packages are looking for funding#   run `npm fund` for details# 🚀  Invoking generators...# 📦  Installing additional dependencies...# added 55 packages in 5s# 11 packages are looking for funding#   run `npm fund` for details# ⚓  Running completion hooks...# 📄  Generating README.md...# 🎉  Successfully created project hello-world.# 👉  Get started with the following commands:#  $ cd hello-world#  $ npm run serve</code></pre><ol start="3"><li>进入生成的 <code>hello-world</code> 目录，通过 <code>npm run serve</code> 命令运行 vue 服务</li></ol><pre><code class="bash">cd hello-worldnpm run serve</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;prism.js&quot; data-manual&gt;&lt;/script&gt;


&lt;h1 id=&quot;如何安装vue项目&quot;&gt;&lt;a href=&quot;#如何安装vue项目&quot; cla</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>新建Hexo项目部署至github</title>
    <link href="http://example.com/2022/03/02/%E6%96%B0%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E8%87%B3github/"/>
    <id>http://example.com/2022/03/02/%E6%96%B0%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E8%87%B3github/</id>
    <published>2022-03-01T16:00:00.000Z</published>
    <updated>2022-03-17T04:08:59.526Z</updated>
    
    <content type="html"><![CDATA[<link href="themes/prism.css" rel="stylesheet" /><script src="prism.js" data-manual></script><h1 id="新建Hexo项目部署至github"><a href="#新建Hexo项目部署至github" class="headerlink" title="新建Hexo项目部署至github"></a>新建Hexo项目部署至github</h1><h3 id="1-查看是否安装node-js"><a href="#1-查看是否安装node-js" class="headerlink" title="1. 查看是否安装node.js"></a>1. 查看是否安装node.js</h3><p>如果安装了node.js可以查看版本号<br>运行命令</p><pre><code class="bash">node -v #显示内容（我安装的是最新版本的nodejs）# v16.13.0</code></pre><h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h3><p>Mac下安装Xcode就自带Git。</p><h3 id="3-Gihub新建仓库"><a href="#3-Gihub新建仓库" class="headerlink" title="3.Gihub新建仓库"></a>3.Gihub新建仓库</h3><p>如果你有github账号那么就在github账号下新建一个仓库，需要注意的是这个仓库名称必须是你的用户名 username . github .比如我的用户名是logicwang 那么我的仓库名就是logicwang .github . io (注：中间不能加空格)</p><h3 id="4-配置SSH-Key"><a href="#4-配置SSH-Key" class="headerlink" title="4.配置SSH Key"></a>4.配置SSH Key</h3><p>这一步不是必须的，配置SSHKey的好处是避免每次更新博客需要输入用户名和密码。这样会方便很多</p><p>详细配置过程。</p><p>4.1 检查本机上是否存在SSH Key<br>打开终端，输入如下命令</p><pre>cd .sshls -la</pre><p>4.2  创建一个SSH Key</p><p>在终端输入如下命令</p><pre><code class="bash">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></pre><p>4.3 添加SSH Key到Github</p><p>点击右上角头像右边的三角图标，点击Settings，然后在左边菜单栏点击SSH and GPG keys，点击New SSH key，Title 随便填一个，在Key栏填入你复制的内容，点击Add SSH key，把你生成的sshkey添加到里面就可以了。</p><h2 id="5-新建文件夹"><a href="#5-新建文件夹" class="headerlink" title="5.新建文件夹"></a>5.新建文件夹</h2><pre><code class="bash">mkdir  blog</code></pre><h2 id="6-安装-hexo"><a href="#6-安装-hexo" class="headerlink" title="6.安装 hexo"></a>6.安装 hexo</h2><pre><code class="bash">npm install -g hexo</code></pre><p>如果报错就在前面加上sudo</p><pre><code class="bash">运行成功显示# Password:# changed 96 packages in 4s</code></pre><h2 id="7-初始化-hexo"><a href="#7-初始化-hexo" class="headerlink" title="7.初始化 hexo"></a>7.初始化 hexo</h2><p>运行命令</p><pre><code class="bash">hexo init myblog(这个可以随意起名) # 成功显示# INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git# INFO  Install dependencies# INFO  Start blogging with Hexo!## 8.进入到你初始化的文件夹中（myblog） ##</code></pre><pre><code class="bash">cd  myblog(你取的名称)</code></pre><h2 id="9-接下来是安装依赖包"><a href="#9-接下来是安装依赖包" class="headerlink" title="9.接下来是安装依赖包"></a>9.接下来是安装依赖包</h2><pre><code class="bash">npm install</code></pre><h2 id="10-浏览器调试"><a href="#10-浏览器调试" class="headerlink" title="10.浏览器调试"></a>10.浏览器调试</h2><pre><code class="bash">hexo s</code></pre><p>点击 <a href="http://localhost:4000/">http://localhost:4000/</a></p><p>如图：<br><img src="https://s3.bmp.ovh/imgs/2022/03/5fa064f0891c29db.jpg" loading="lazy"></p><p>转跳到浏览器显示如下</p><p><img src="https://s3.bmp.ovh/imgs/2022/03/96e3d311c036e065.jpg" loading="lazy"></p><h2 id="11-同步本地博客到Github"><a href="#11-同步本地博客到Github" class="headerlink" title="11.同步本地博客到Github"></a>11.同步本地博客到Github</h2><p>在myblog（或者你自己取的名称）中的_config.yml文件中添加deploy节点</p><pre><code class="bash">deploy:  type: git  repo: git@github.com:username/username.github.io.git  branch: master</code></pre><p>为了能够使Hexo部署到GitHub上，需要安装一个插件</p><pre><code class="bash">npm install hexo-deployer-git --save</code></pre><p>然后运行</p><pre><code class="bash">hexo cleanhexo g -d</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;prism.js&quot; data-manual&gt;&lt;/script&gt;

&lt;h1 id=&quot;新建Hexo项目部署至github&quot;&gt;&lt;a href=&quot;#新建Hexo项</summary>
      
    
    
    
    <category term="Hexo github" scheme="http://example.com/categories/Hexo-github/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>git add后撤销</title>
    <link href="http://example.com/2022/02/28/Git%20add%E5%90%8E%E6%92%A4%E9%94%80/"/>
    <id>http://example.com/2022/02/28/Git%20add%E5%90%8E%E6%92%A4%E9%94%80/</id>
    <published>2022-02-27T16:00:00.000Z</published>
    <updated>2022-03-24T02:43:52.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何撤销git-add操作"><a href="#如何撤销git-add操作" class="headerlink" title="如何撤销git add操作"></a>如何撤销git add操作</h2><p>使用Git的时候，有时候不小心使用git add，添加了不想追踪的文件。也就是track了一些不想track的文件，这个时候需要撤销操作，我们来看看应该如何操作</p><p><img src="https://s3.bmp.ovh/imgs/2022/02/40f8615fa0e6951a.jpg" loading="lazy"></p><p>1.使用git reset命令</p><pre><code class="html">&lt;center&gt;    &lt;img src = &#39;https://s3.bmp.ovh/imgs/2022/02/da5a701fdddad4e4.jpg&#39; /&gt;    &lt;br&gt;    &lt;div style=&quot;color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;&quot;&gt;      git reset命令效果      &lt;/div&gt;&lt;/center&gt;</code></pre><center>    <img src = 'https://s3.bmp.ovh/imgs/2022/02/da5a701fdddad4e4.jpg' / loading="lazy">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">      git reset命令效果      </div></center>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如何撤销git-add操作&quot;&gt;&lt;a href=&quot;#如何撤销git-add操作&quot; class=&quot;headerlink&quot; title=&quot;如何撤销git add操作&quot;&gt;&lt;/a&gt;如何撤销git add操作&lt;/h2&gt;&lt;p&gt;使用Git的时候，有时候不小心使用git add，添</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown插入图片及图注的方法</title>
    <link href="http://example.com/2022/02/28/Markdown%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%8F%8A%E5%9B%BE%E6%B3%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/02/28/Markdown%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%8F%8A%E5%9B%BE%E6%B3%A8%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-02-27T16:00:00.000Z</published>
    <updated>2022-03-17T04:12:55.648Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="Markdown插入图片及图注的方法"><a href="#Markdown插入图片及图注的方法" class="headerlink" title="Markdown插入图片及图注的方法"></a>Markdown插入图片及图注的方法</h2><h3 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h3><p>格式为：</p><pre><code class="bash">![图片替换文字](图片地址)</code></pre><p>这里不建议从剪贴板或本地直接粘贴到Markdown文档中，个人使用的是(ImgURL免费图床)[<a href="https://imgurl.org/]%E6%AF%8F%E5%A4%A9%E6%9C%80%E5%A4%9A%E4%B8%8A%E4%BC%A010%E5%BC%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E5%8D%95%E5%BC%A0%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E8%B6%85%E8%BF%875M%EF%BC%8C%E4%B8%93%E4%B8%9A%E7%89%88198%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%9C%89%E9%92%B1%E5%B0%B1%E6%94%AF%E6%8C%81%E6%AD%A3%E7%89%88%EF%BC%8C%E6%B2%A1%E9%92%B1%E5%B0%B1%E6%9A%82%E6%97%B6%E7%99%BD%E5%AB%96%EF%BC%8C%E6%88%96%E8%80%85%E9%80%89%E6%8B%A9%E5%85%B6%E4%BB%96%E7%9A%84%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A">https://imgurl.org/]每天最多上传10张图片，单张图片不能超过5M，专业版198，如果你有钱就支持正版，没钱就暂时白嫖，或者选择其他的免费图床</a></p><p>下面是一些进阶操作。</p><h3 id="插入图注，并调整尺寸"><a href="#插入图注，并调整尺寸" class="headerlink" title="插入图注，并调整尺寸"></a>插入图注，并调整尺寸</h3><pre><code class="bash">&lt;center&gt;    &lt;img style=&quot;border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot;     src=&quot;在这里插入图片地址&quot; width = &quot;65%&quot; alt=&quot;&quot;/&gt;    &lt;br&gt;    &lt;div style=&quot;color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;&quot;&gt;      在这里插入图片注释      &lt;/div&gt;&lt;/center&gt;</code></pre><p>其中<code>width = &quot;65%&quot;</code>可以将图片宽度（等比例）压缩为整页宽的65%。<br>图注部分在Typora中显示正常，但在CSDN中，图注与图片之间会有较大空隙（目前不知道如何解决）。<br>若要插入包含LaTeX的图注，注释部分改为下面的代码即可。</p><pre><code class="bash">在这里插入图片注释&lt;img src=&quot;http://latex.codecogs.com/gif.latex? 在这里输入LaTeX公式&quot;&gt;</code></pre><h3 id="并排插入两张图片"><a href="#并排插入两张图片" class="headerlink" title="并排插入两张图片"></a>并排插入两张图片</h3><pre><code class="bash"> &lt;center&gt;    &lt;img style=&quot;border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot;     src=&quot;在这里插入图片1地址&quot; width = &quot;30%&quot; alt=&quot;&quot;/&gt;    &lt;img style=&quot;border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot;     src=&quot;在这里插入图片2地址&quot; width = &quot;30%&quot; alt=&quot;&quot;/&gt;    &lt;br&gt;    &lt;div style=&quot;color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;&quot;&gt;      在这里插入图片注释      &lt;/div&gt;&lt;/center&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;Markdown插入图片及图注的方法&quot;&gt;&lt;a href=&quot;#Markdown插入图片及图注的方法</summary>
      
    
    
    
    <category term="Markdown" scheme="http://example.com/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Vue中创建单文件组件 注册组件 以及组件的使用</title>
    <link href="http://example.com/2022/02/28/Vue%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6%20%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6%20%E4%BB%A5%E5%8F%8A%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/02/28/Vue%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6%20%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6%20%E4%BB%A5%E5%8F%8A%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-27T16:00:00.000Z</published>
    <updated>2022-03-17T04:15:46.208Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="Vue中创建单文件组件-注册组件-以及组件的使用"><a href="#Vue中创建单文件组件-注册组件-以及组件的使用" class="headerlink" title="Vue中创建单文件组件 注册组件 以及组件的使用"></a>Vue中创建单文件组件 注册组件 以及组件的使用</h2><h3 id="1-App-vue"><a href="#1-App-vue" class="headerlink" title="1. App.vue"></a>1. App.vue</h3><pre><code class="html">#App.vue&lt;template&gt;  &lt;div&gt;    &lt;v-home&gt;&lt;/v-home&gt;    &lt;hr /&gt;    &lt;br /&gt;    &lt;v-news&gt;&lt;/v-news&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// 引入组件// 挂载组件// 在模板中使用import Home from &quot;./Home.vue&quot;;import News from &quot;./News.vue&quot;;export default &#123;  data() &#123;    return &#123;      msg: &quot;你好vue&quot;,    &#125;;  &#125;,  components: &#123;    /*前面的组件名称不能和html标签一样*/ &quot;v-home&quot;: Home,    &quot;v-news&quot;: News,  &#125;,&#125;;&lt;/script&gt;</code></pre><h3 id="2-Header-vue"><a href="#2-Header-vue" class="headerlink" title="2. Header.vue"></a>2. Header.vue</h3><pre><code class="html"># Header.vue&lt;template&gt;  &lt;div&gt;    &lt;h2 class=&quot;header&quot;&gt;这是一个头部组件&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      msg: &quot;这是一个头部组件&quot;,    &#125;;  &#125;,&#125;;&lt;/script&gt;</code></pre><h3 id="3-Home-vue"><a href="#3-Home-vue" class="headerlink" title="3. Home.vue"></a>3. Home.vue</h3><pre><code class="html">&lt;!-- Home.vue --&gt;&lt;template&gt;&lt;!-- 所有的内容要被根节点包含起来  --&gt;  &lt;div&gt;    &lt;v-header&gt;&lt;/v-header&gt;    &lt;br /&gt;    &lt;hr /&gt;    &lt;h2&gt;这是一个首页组件--&#123;&#123; msg &#125;&#125;&lt;/h2&gt;    &lt;button @click=&quot;run()&quot;&gt;执行run方法&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// 引入头部组件import Header from &quot;./Header.vue&quot;;export default &#123;  data() &#123;    return &#123;      msg: &quot;我是一个首页组件msg&quot;,    &#125;;  &#125;,  methods: &#123;    run() &#123;      alert(this.msg);    &#125;,  &#125;,  components: &#123;    &quot;v-header&quot;: Header,  &#125;,&#125;;&lt;/script&gt;</code></pre><h3 id="4-News-vue"><a href="#4-News-vue" class="headerlink" title="4. News.vue"></a>4. News.vue</h3><pre><code class="html">&lt;!-- News.vue --&gt;&lt;template&gt;  &lt;div&gt;    &lt;v-header&gt;&lt;/v-header&gt;    &lt;h2&gt;这是一个新闻组件&lt;/h2&gt;    &lt;ul&gt;      &lt;li&gt;111111&lt;/li&gt;      &lt;li&gt;2222&lt;/li&gt;      &lt;li&gt;333333&lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;//引入头部组件import Header from &quot;./Header.vue&quot;;export default &#123;  data() &#123;    return &#123;      msg: &quot;我是一个新闻组件&quot;,    &#125;;  &#125;,  components: &#123;    &quot;v-header&quot;: Header,  &#125;,&#125;;&lt;/script&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;Vue中创建单文件组件-注册组件-以及组件的使用&quot;&gt;&lt;a href=&quot;#Vue中创建单文件组件-</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由三种写法方式</title>
    <link href="http://example.com/2022/02/26/Vue%E8%B7%AF%E7%94%B1%E4%B8%89%E7%A7%8D%E5%86%99%E6%B3%95%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2022/02/26/Vue%E8%B7%AF%E7%94%B1%E4%B8%89%E7%A7%8D%E5%86%99%E6%B3%95%E6%96%B9%E5%BC%8F/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-03-17T04:13:31.516Z</updated>
    
    <content type="html"><![CDATA[<link href="themes/prism.css" rel="stylesheet" /><script src="prism.js" data-manual></script><h2 id="常见-性能一般"><a href="#常见-性能一般" class="headerlink" title="常见(性能一般)"></a>常见(性能一般)</h2><pre><code class="js">import Index from &quot;@/components/index&quot;const router = new Router(&#123;    routes: [        &#123;        path: &#39;/&#39;,        name: &#39;Index&#39;        component: Index,        &#125;    ]&#125;)</code></pre><h2 id="性能有优化"><a href="#性能有优化" class="headerlink" title="性能有优化"></a>性能有优化</h2><pre><code class="js">const Index = (resolve) =&gt; &#123;  import(&#39;@/components/index&#39;).then((module) =&gt; &#123;    resolve(module);  &#125;);&#125;;const router = new Router(&#123;    routes: [        &#123;        path: &#39;/&#39;,        name: &#39;Index&#39;        component: Index,        &#125;    ]&#125;)</code></pre><h2 id="路由懒加载-性能较优，推荐使用"><a href="#路由懒加载-性能较优，推荐使用" class="headerlink" title="路由懒加载(性能较优，推荐使用)"></a>路由懒加载(性能较优，推荐使用)</h2><pre><code class="js">const index = require(&#39;@/components/index&#39;);const Index = resolve =&gt; require.ensure([], () =&gt; resolve(index), &#39;list&#39;);const router = new Router(&#123;    routes: [        &#123;        path: &#39;/&#39;,        name: &#39;Index&#39;        component: Index,        &#125;    ]&#125;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;prism.js&quot; data-manual&gt;&lt;/script&gt;

&lt;h2 id=&quot;常见-性能一般&quot;&gt;&lt;a href=&quot;#常见-性能一般&quot; class=&quot;h</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的语法糖</title>
    <link href="http://example.com/2022/02/24/Vue%E4%B8%AD%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <id>http://example.com/2022/02/24/Vue%E4%B8%AD%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/</id>
    <published>2022-02-23T16:00:00.000Z</published>
    <updated>2022-03-17T06:11:27.334Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="Vue中的语法糖"><a href="#Vue中的语法糖" class="headerlink" title="Vue中的语法糖"></a>Vue中的语法糖</h2><h3 id="1、什么是语法糖？"><a href="#1、什么是语法糖？" class="headerlink" title="1、什么是语法糖？"></a>1、什么是语法糖？</h3><p>学习语法糖之前我们要了解什么是语法糖：<br>语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</p><h3 id="2、VUE中语法糖有哪些"><a href="#2、VUE中语法糖有哪些" class="headerlink" title="2、VUE中语法糖有哪些?"></a>2、VUE中语法糖有哪些?</h3><h4 id="2-1、最常见的语法糖-v-model"><a href="#2-1、最常见的语法糖-v-model" class="headerlink" title="2.1、最常见的语法糖 v-model"></a>2.1、最常见的语法糖 v-model</h4><p>使用 v-model 可以实现数据双向绑定，但是如何实现的呢？<br>v-model 绑定数据之后，既绑定了数据，又添加了事件监听，这个事件就是 input 事件。<br>使用案例：</p><pre><code class="html">&lt;!-- 语法糖写法 --&gt;&lt;input type=&quot;text&quot; v-model=&quot;name&quot; &gt;&lt;!-- 还原为以下实例 --&gt;&lt;input type=&quot;text&quot;  v-bind:value=&quot;name&quot;  v-on:input=&quot;name=$event.target.value&quot;&gt;</code></pre><p>输入的时候会触发 input 事件，input 事件会把当前值赋值给 value ，这就是 v-model 为什么可以实现双向绑定的原因。</p><h4 id="2-2、v-bind-的语法糖"><a href="#2-2、v-bind-的语法糖" class="headerlink" title="2.2、v-bind 的语法糖"></a>2.2、v-bind 的语法糖</h4><p>v-bind 用来添加动态属性的，常见的 src、href、class、style、title 等属性都可以通过 v-bind 添加动态属性值。<br>v-bind 的语法糖就是去掉 v-bind 替换成冒号 (:)<br>具体实例:</p><pre><code class="html">&lt;!-- 语法糖写法 --&gt;&lt;div :title=&quot;title&quot;&gt; &lt;img :src=&quot;url&quot; alt=&quot;&quot;&gt; &lt;a :href=&quot;link&quot; rel=&quot;external nofollow&quot;  rel=&quot;external nofollow&quot; &gt;没有语法糖&lt;/a&gt;&lt;/div&gt;&lt;!-- 没有语法糖 --&gt;&lt;div v-bind:title=&quot;title&quot;&gt; &lt;img v-bind:src=&quot;url&quot; alt=&quot;&quot;&gt; &lt;a v-bind:href=&quot;link&quot; rel=&quot;external nofollow&quot;  rel=&quot;external nofollow&quot; &gt;没有语法糖&lt;/a&gt;&lt;/div&gt;</code></pre><h4 id="2-2、v-on-的语法糖"><a href="#2-2、v-on-的语法糖" class="headerlink" title="2.2、v-on 的语法糖"></a>2.2、v-on 的语法糖</h4><p>v-on 绑定事件监听器的，v-on 的语法糖，就是简写成@ 。<br>情况1：如果方法不传参时，可以不加小括号。</p><pre><code class="html">&lt;!-- 需要注意的是，如果方法本身有一个参数，会默认将原生的事件event参数传递进来 --&gt;&lt;button @click=&quot;btn&quot;&gt;语法糖&lt;/button&gt;&lt;button v-on:click=&quot;btn&quot;&gt;无语法糖&lt;/button&gt;methods:&#123; btn( event )&#123;  console.log( &#39;event&#39; , event ) &#125;&#125;</code></pre><p>情况2：如果需要传递参数时，又同时需要 event 参数。</p><pre><code class="html">&lt;button @click=&quot;btn( &#39;点击事件&#39; , $event )&quot;&gt;语法糖&lt;/button&gt;&lt;!-- 需要注意的是，$event 事件拿到浏览器事件对象 --&gt;methods:&#123; btn( type, event )&#123;  console.log( &#39;type&#39; , type ) //点击事件  console.log( &#39;event&#39; , event ) &#125;&#125;</code></pre><h4 id="2-3、修饰符"><a href="#2-3、修饰符" class="headerlink" title="2.3、修饰符"></a>2.3、修饰符</h4><p>修饰符是以半角句号 . 指明的特殊后缀。v-on 后面的修饰符，也是语法糖。</p><p>示例：链接添加点击事件，点击之后不希望跳转。</p><pre><code class="html">&lt;!--  语法糖 --&gt;&lt;a href=&quot;http://www.baidu.com&quot; rel=&quot;external nofollow&quot;  rel=&quot;external nofollow&quot;  @click.prevent=&quot;go&quot;&gt;百度&lt;/a&gt;&lt;!-- 普通写法 --&gt;&lt;a href=&quot;http://www.baidu.com&quot; rel=&quot;external nofollow&quot;  rel=&quot;external nofollow&quot;  v-on:click=&quot;go&quot;&gt;百度&lt;/a&gt;methods:&#123; go(e)&#123;  e.preventDefault();  console.log(&#39;阻止链接跳转&#39;) &#125;&#125;</code></pre><p>prevent 修饰符是阻止默认事件。还有 submit 同样也适用。</p><pre><code class="html">&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</code></pre><p>下列是常见的修饰符，与上边 .prevent 使用相同。</p><ul><li> stop 用来阻止事件冒泡。</li><li> .once 事件只触发一次。</li><li> .self 事件只在自身触发，不能从内部触发。</li><li> .enter | .tab | .delete | .esc ….. 键盘修饰符</li><li> .ctr | .alt | .shift | .meta 系统修饰符</li></ul><h3 id="3、动态css"><a href="#3、动态css" class="headerlink" title="3、动态css"></a>3、动态css</h3><p>使用 v-bind 可以通过 style 或 class， 可以添加动态样式。</p><pre><code class="html">&lt;!-- 点击 你好，实现文字红黑之间切换 --&gt;&lt;h1 @click=&quot; changeColor = !changeColor &quot; :style=&quot;&#123;color:changeColor?&#39;red&#39;:&#39;black&#39;&#125;&quot;&gt; 你好&lt;/h1&gt;data:&#123;  changeColor:false&#125;</code></pre><h3 id="4、注册组件语法糖"><a href="#4、注册组件语法糖" class="headerlink" title="4、注册组件语法糖"></a>4、注册组件语法糖</h3><p>所谓的注册组件语法糖是指省去组件构造器的定义，直接将组件构造器对象传入注册组件函数里，这样会减少 CPU 的调度以及内存的分配。</p><p>全局组件使用：</p><pre><code class="js">//全局组件语法糖写法Vue.component(  &#39;my-component&#39; ,   template:`      &lt;div&gt;组件内容&lt;/div&gt;  `)/* 全局组件注册 *///  组件使用&lt;my-component&gt;&lt;/my-component&gt;//注册组件const myComponent = Vue.extend(&#123; template:`  &lt;div&gt;   &lt;h2&gt;VUkeh&lt;/h2&gt;      &lt;/div&gt;  `&#125;)Vue.component(&#39;myComponent&#39;, myComponent)</code></pre><p>局部组件使用：</p><pre><code class="js">// 全局组件语法糖写法components:&#123;  &#39;my-component&#39;:&#123;      template:`&lt;div&gt;组件内容&lt;/div&gt;`  &#125;&#125;// 局部组件注册// 注册组件const myComponent = Vue.extend(&#123; template:`  &lt;div&gt;   &lt;h2&gt;VUkeh&lt;/h2&gt;      &lt;/div&gt;  `,  components:&#123;      child:&#123;     template:`&lt;div&gt;子组件内容&lt;/div&gt;`    &#125;  &#125;&#125;)Vue.component(&#39;myComponent&#39;, myComponent)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;Vue中的语法糖&quot;&gt;&lt;a href=&quot;#Vue中的语法糖&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的原生事件</title>
    <link href="http://example.com/2022/02/23/Vue%E4%B8%AD%E7%9A%84%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6./"/>
    <id>http://example.com/2022/02/23/Vue%E4%B8%AD%E7%9A%84%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6./</id>
    <published>2022-02-22T16:00:00.000Z</published>
    <updated>2022-03-17T05:32:30.136Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="Vue中的原生事件"><a href="#Vue中的原生事件" class="headerlink" title="Vue中的原生事件"></a>Vue中的原生事件</h2><pre><code class="html">&lt;router-link :to=&quot;path&quot; @click.native=&quot;&#39;&#39;&quot;&gt;&lt;/router-link&gt;</code></pre><p>在router-link中必须加入native,click事件才能生效，否则，router-link会阻止click事件，而a标签不会阻止。</p><p>可以这么认为，native就是一个把组件变回原生DOM的一种方法，给vue组件绑定事件的时候，一定要加上native，如果是普通元素就不需要</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;Vue中的原生事件&quot;&gt;&lt;a href=&quot;#Vue中的原生事件&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
</feed>
