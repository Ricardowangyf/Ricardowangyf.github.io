<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某科学的王先生</title>
  
  <subtitle>相逢拌酩酊,何必备芳鲜。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-16T11:47:53.877Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>王先生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试笔记记录</title>
    <link href="http://example.com/2023/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2023/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-02T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端面试题记录"><a href="#前端面试题记录" class="headerlink" title="前端面试题记录"></a>前端面试题记录</h1><h2 id="HTML面试题记录"><a href="#HTML面试题记录" class="headerlink" title="HTML面试题记录"></a>HTML面试题记录</h2><h3 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h3><ol><li>语义化标签：比如 article、footer、header、nav、section;</li><li>表单控件：calendar、date、time、email、url、search;</li><li>媒体元素video和audio元素</li><li>本地存储：localStorage   sessionStorage </li><li>新的技术，websocket</li></ol><h3 id="前端页面由哪三个部分组成"><a href="#前端页面由哪三个部分组成" class="headerlink" title="前端页面由哪三个部分组成"></a>前端页面由哪三个部分组成</h3><ul><li>html：页面结构，布局</li><li>css：样式</li><li>js：行为交互</li></ul><h3 id="HTML和XHTML的区别"><a href="#HTML和XHTML的区别" class="headerlink" title="HTML和XHTML的区别"></a>HTML和XHTML的区别</h3><blockquote><p>XHTML：重写了HTML规范，比HTML更严格</p></blockquote><ol><li><p>XHTML中所有的标记都必须有一个相应的结束标签；</p></li><li><p>XHTML所有标签的元素和属性的名字都必须使用小写；</p></li><li><p>所有的XML标记都必须合理嵌套；</p></li><li><p>所有的属性都必须用引号“”括起来；</p></li><li><p>把所有&lt;和&amp;特殊符号用编码表示；</p></li><li><p>给所有属性附一个值；</p></li><li><p>不要在注释内容中使用“–”；</p></li><li><p>图片必须使用说明文字。</p></li></ol><h3 id="canvas和svg的区别"><a href="#canvas和svg的区别" class="headerlink" title="canvas和svg的区别"></a>canvas和svg的区别</h3><table><thead><tr><th align="left">canvas</th><th align="center">svg</th></tr></thead><tbody><tr><td align="left">通过js绘制2D图形，按像素进行渲染，当位置发生改变会重新进行绘制</td><td align="center">使用XML绘制的2D图形，可以为元素添加js处理器</td></tr><tr><td align="left">依赖分辨率</td><td align="center">不依赖分辨率</td></tr><tr><td align="left">不支持事件处理器</td><td align="center">支持事件处理器</td></tr><tr><td align="left">弱的文本渲染能力</td><td align="center">最适合带有大型渲染区域的应用程序（如谷歌地图）</td></tr><tr><td align="left">能以.png或.jpg格式保存结果图像</td><td align="center">复杂度高会减慢渲染速度</td></tr><tr><td align="left">最适合图像密集型游戏，其中的许多对象会被频繁重绘</td><td align="center">不适合游戏应用</td></tr></tbody></table><h3 id="div-css布局和table布局有什么优点"><a href="#div-css布局和table布局有什么优点" class="headerlink" title="div+css布局和table布局有什么优点"></a>div+css布局和table布局有什么优点</h3><ul><li><p>表现和结构分离</p></li><li><p>页面加载速度更快，结构化清晰，页面显示简洁</p></li><li><p>修改样式方便，只要改css文件</p></li><li><p>易于优化，搜索引擎更友好</p></li></ul><h3 id="语义化的了解"><a href="#语义化的了解" class="headerlink" title="语义化的了解"></a>语义化的了解</h3><p>正确的标签做正确的事</p><ul><li><p>内容结构化，结构更清晰</p></li><li><p>便于搜索引擎解析</p></li><li><p>便于阅读理解维护</p></li></ul><h3 id="src和href的区别"><a href="#src和href的区别" class="headerlink" title="src和href的区别"></a>src和href的区别</h3><p><code>src</code>: 引用资源，替换当前元素，用在img，script，iframe上</p><p><code>href</code>: 在当前元素和引用资源建立联系，用在link和a等元素上</p><h3 id="img标签的title和alt是什么"><a href="#img标签的title和alt是什么" class="headerlink" title="img标签的title和alt是什么"></a>img标签的title和alt是什么</h3><p><code>title</code>：解释信息，鼠标移上去显示的信息</p><p><code>alt</code>：替换信息、图片不能显示时的信息</p><h3 id="块级元素、行内元素、行内块元素"><a href="#块级元素、行内元素、行内块元素" class="headerlink" title="块级元素、行内元素、行内块元素"></a>块级元素、行内元素、行内块元素</h3><p>块级元素</p><ul><li><p>特点：可设置宽高边距，占满整行，会自动换行</p></li><li><p>示例：div、 p、 h1 、h6、ol、ul、dl、table、address、blockquote、form</p></li></ul><p>行内元素：</p><ul><li><p>特点：无法设置宽高边距，不会占满整行，不会自动换行</p></li><li><p>示例：a、strong、b、em、i、del、s、ins、u、span</p></li></ul><p>行内块元素：</p><ul><li>特点：可设置宽高，占满整行，但不会自动换行</li></ul><h3 id="seo的TDK是什么"><a href="#seo的TDK是什么" class="headerlink" title="seo的TDK是什么"></a>seo的TDK是什么</h3><p>title  description  keywords</p><h2 id="JS面试题记录"><a href="#JS面试题记录" class="headerlink" title="JS面试题记录"></a>JS面试题记录</h2><h3 id="JS-以及-区别-在什么情况下使用"><a href="#JS-以及-区别-在什么情况下使用" class="headerlink" title="JS==以及===区别   在什么情况下使用"></a>JS==以及===区别   在什么情况下使用</h3><p><code>==</code>和<code>===</code>都是用于比较两个值是否相等的JS运算符，它们之间的主要区别在于它们的比较方式和类型转换。</p><p><code>==</code>比较两个值是否相等时，会进行类型转换。如果两个值的数据类型不同，JS会尝试将它们转换为相同的类型，然后再进行比较。这种类型转换可能会产生一些意想不到的结果，例如：</p><pre><code class="js">console.log(1 == &#39;1&#39;); // trueconsole.log(true == 1); // trueconsole.log(null == undefined); // true</code></pre><p><code>===</code>比较两个值是否相等时，不会进行类型转换。只有当两个值的类型相同且值相等时，才会返回true，否则返回false。这种比较方式更为严格和安全，因为它可以避免类型转换带来的问题。</p><p>在一般情况下，建议使用<code>===</code>运算符进行比较。只有在确实需要进行类型转换时，才使用<code>==</code>运算符。例如，在比较两个值是否为null或undefined时，使用==比较更为方便：</p><pre><code class="js">if (value == null) &#123;  // 这里会同时匹配 null 和 undefined&#125;</code></pre><p>需要注意的是，使用<code>==</code>比较时，要注意避免类型转换带来的意想不到的结果。如果不确定类型转换的结果，可以使用<code>===</code>进行比较，或者先显式地将值转换为相应的类型，再进行比较。例如：</p><pre><code class="js">console.log(Number(&#39;1&#39;) == 1); // trueconsole.log(Number(&#39;foo&#39;) == NaN); // false，NaN 不等于任何值，包括它本身console.log(String(1) === &#39;1&#39;); // true</code></pre><h3 id="typeof-与-instanceof-区别"><a href="#typeof-与-instanceof-区别" class="headerlink" title="typeof 与 instanceof 区别"></a>typeof 与 instanceof 区别</h3><p><code>typeof</code>和<code>instanceof</code>操作符都是用来判断数据类型的 但使用场景却各不相同。</p><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>typeof运算符返回一个字符串，表示操作数的类型</p><pre><code class="js">typeof operandtypeof(operand)</code></pre><p>operand表示要返回类型的对象或基本类型的表达式</p><pre><code class="js">typeof 666 // &#39;number&#39;typeof &#39;666&#39; // &#39;string&#39;typeof undefined // &#39;undefined&#39;typeof true // &#39;boolean&#39;typeof Symbol() // &#39;symbol&#39;typeof null // &#39;object&#39;typeof [] // &#39;object&#39;typeof &#123;&#125; // &#39;object&#39;</code></pre><p>typeof可以精准的判断基本数据类型（null）除外</p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><code>instanceof</code> 运算符用于检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的原型链上<br>使用方法如下</p><pre><code class="js">object instanceof constructor</code></pre><p>object 是指某个实例对象<br>constructor是指某个构造函数</p><pre><code class="js">// 定义构造函数function C()&#123;&#125;function D()&#123;&#125;var o = new C();o instanceof C; // true，因为 Object.getPrototypeOf(o) === C.prototypeo instanceof D; // false，因为 D.prototype 不在 o 的原型链上o instanceof Object; // true，因为 Object.prototype.isPrototypeOf(o) 返回 trueC.prototype instanceof Object // true，同上C.prototype = &#123;&#125;;var o2 = new C();o2 instanceof C; // trueo instanceof C; // false，C.prototype 指向了一个空对象，这个空对象不在 o 的原型链上。D.prototype = new C(); // 继承var o3 = new D();o3 instanceof D; // trueo3 instanceof C; // true 因为 C.prototype 现在在 o3 的原型链上</code></pre><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>typeof与instanceof 都是判断数据类型的方法，区别如下：</p><ul><li>typeof会返回一个运算数的基本类型，instanceof 返回的是布尔值</li><li>instanceof 可以准确判断引用数据类型，但是不能正确判断原始数据类型</li><li>typeof虽然可以判断原始数据类型（null 除外），但是无法判断引用数据类型（function 除外）</li></ul><h3 id="eval是做什么的？"><a href="#eval是做什么的？" class="headerlink" title="eval是做什么的？"></a>eval是做什么的？</h3><p> 非严格模式，可以将json字符串转换为对象的形式。也可将字符串参数转化为脚本代码执行，但只适合在非严格模式下。它的功能是将对应的字符串解析成js并执行，应该避免使用js，因为非常消耗性能（2次，一次解析成js，一次执行），简单来说将字符串参数解析成js代码并执行，并返回执行结果。但应避免使用，不安全，也耗性能。</p><h2 id="Vue面试题记录"><a href="#Vue面试题记录" class="headerlink" title="Vue面试题记录"></a>Vue面试题记录</h2><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>计算属性是用来声明式的描述一个值依赖了其他的值，当它依赖的这个值发生改变时，就更新DOM<br>当在模板中把数据绑定到一个计算属性上时，vue会在它依赖的任何值导致该计算属性改变时更新DOM<br>每个计算属性都包括一个getter和setter，读取时触发getter，修改时触发setter</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="vue生命周期是什么"><a href="#vue生命周期是什么" class="headerlink" title="vue生命周期是什么"></a>vue生命周期是什么</h4><p>Vue 实例从创建到销毁的过程为生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，称之为 Vue 的生命周期。</p><h4 id="vue生命周期总共有几个阶段"><a href="#vue生命周期总共有几个阶段" class="headerlink" title="vue生命周期总共有几个阶段"></a>vue生命周期总共有几个阶段</h4><p>创建前/后, 载入前/后,更新前/后,销毁前/销毁后</p><h4 id="简述每个周期具体适合哪些场景"><a href="#简述每个周期具体适合哪些场景" class="headerlink" title="简述每个周期具体适合哪些场景"></a>简述每个周期具体适合哪些场景</h4><p>beforeCreate：在new一个vue实例后，只有一些默认的生命周期钩子和默认事件，其他的东西都还没创建。在beforeCreate生命周期执行的时候，data和methods中的数据都还没有初始化。不能在这个阶段使用data中的数据和methods中的方法</p><p>created：data 和 methods都已经被初始化好了，如果要调用 methods 中的方法，或者操作 data 中的数据，最早可以在这个阶段中操作</p><p>beforeMount：执行到这个钩子的时候，在内存中已经编译好了模板了，但是还没有挂载到页面中，此时，页面还是旧的</p><p>mounted：执行到这个钩子的时候，就表示Vue实例已经初始化完成了。此时组件脱离了创建阶段，进入到了运行阶段。 如果我们想要通过插件操作页面上的DOM节点，最早可以在和这个阶段中进行</p><p>beforeUpdate： 当执行这个钩子时，页面中的显示的数据还是旧的，data中的数据是更新后的， 页面还没有和最新的数据保持同步</p><p>updated：页面显示的数据和data中的数据已经保持同步了，都是最新的</p><p>beforeDestory：Vue实例从运行阶段进入到了销毁阶段，这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于可用状态。还没有真正被销毁</p><p>destroyed： 这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于不可用状态。组件已经被销毁了。</p><h4 id="第一次页面加载会触发哪几个钩子？"><a href="#第一次页面加载会触发哪几个钩子？" class="headerlink" title="第一次页面加载会触发哪几个钩子？"></a>第一次页面加载会触发哪几个钩子？</h4><p>beforeCreate, created, beforeMount, mounted </p><h3 id="组件传值的几种类型"><a href="#组件传值的几种类型" class="headerlink" title="组件传值的几种类型"></a>组件传值的几种类型</h3><ul><li>父组件给子组件传值</li><li>子组件给父组件传值</li><li>非父子组件传值(任意组件之间传值)</li></ul><h4 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h4><ul><li>父组件中通过 import - components - &lt; /&gt; 三部曲 注册子组件</li><li>子组件在 props 对象中创建一个属性 prop</li><li>父组件在注册的子组件标签中添加 prop 属性，即 prop=“value”</li><li>父组件可以通过 v-bind:prop（:prop）实现数据双向绑定<blockquote><p>以下是具体实例</p></blockquote></li></ul><pre><code class="html">&lt;!-- 父组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;child-component @myEvent=&quot;handleEvent&quot;&gt;&lt;/child-component&gt;    &lt;p&gt;从子组件接收到的值：&#123;&#123; receivedValue &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ChildComponent from &#39;@/components/ChildComponent.vue&#39;export default &#123;  components: &#123;    ChildComponent  &#125;,  data() &#123;    return &#123;      receivedValue: &#39;&#39;    &#125;  &#125;,  methods: &#123;    handleEvent(value) &#123;      this.receivedValue = value    &#125;  &#125;&#125;&lt;/script&gt;</code></pre><pre><code class="html">&lt;!-- 子组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;button @click=&quot;emitValue&quot;&gt;传值给父组件&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  methods: &#123;    emitValue() &#123;      this.$emit(&#39;myEvent&#39;, &#39;这是子组件传递给父组件的值&#39;)    &#125;  &#125;&#125;&lt;/script&gt;</code></pre><h4 id="子组件给父组件传值"><a href="#子组件给父组件传值" class="headerlink" title="子组件给父组件传值"></a>子组件给父组件传值</h4><ul><li>子组件中需要以某种方式的方法来触发一个自定义事件（例如点击事件）</li><li>子组件使用 this.$emit 方法，第一个参数为父组件定义的方法名称 event，第二个参数为传递的值</li><li>在父组件中注册子组件并在子组件标签上绑定对自定义事件的监听（event=“Event”），Event(data) 可以接收传过来的参数<blockquote><p>以下是具体实例</p></blockquote></li></ul><pre><code class="html">&lt;!-- 子组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;button @click=&quot;emitValue&quot;&gt;传值给父组件&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  methods: &#123;    emitValue() &#123;      this.$emit(&#39;myEvent&#39;, &#39;这是子组件传递给父组件的值&#39;)    &#125;  &#125;&#125;&lt;/script&gt;</code></pre><p>子组件定义了一个按钮，当按钮被点击时，sendData方法会被调用，它通过this.$emit方法触发了一个自定义事件child-event，并传递了一个字符串值作为参数。</p><pre><code class="html">&lt;!-- 父组件 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;child-component @myEvent=&quot;handleEvent&quot;&gt;&lt;/child-component&gt;    &lt;p&gt;从子组件接收到的值：&#123;&#123; receivedValue &#125;&#125;&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ChildComponent from &#39;@/components/ChildComponent.vue&#39;export default &#123;  components: &#123;    ChildComponent  &#125;,  data() &#123;    return &#123;      receivedValue: &#39;&#39;    &#125;  &#125;,  methods: &#123;    handleEvent(value) &#123;      this.receivedValue = value    &#125;  &#125;&#125;&lt;/script&gt;</code></pre><p>父组件通过import引入了子组件，然后在模板中使用<code>&lt;child-component&gt;</code>标签将子组件添加到父组件中。在子组件上，我们监听了myEvent事件，并在触发事件时调用了handleEvent方法。handleEvent方法将接收到的值设置为receivedValue，然后在模板中显示出来。</p><h4 id="兄弟组件之间的传参"><a href="#兄弟组件之间的传参" class="headerlink" title="兄弟组件之间的传参"></a>兄弟组件之间的传参</h4><p>EventBus 是中央事件总线，不管是父子组件，兄弟组件，跨层级组件等都可以使用它完成通信操作<br>兄click设置点击事件，用$emit设置通道传参给中转站，弟通过 $on接收来自中转站的参数</p><h4 id="任意组件之间的通信"><a href="#任意组件之间的通信" class="headerlink" title="任意组件之间的通信"></a>任意组件之间的通信</h4><p>任意关系的组件之间的传参可以通过 vue-router 来完成</p><h3 id="vue路由传参的三种方式"><a href="#vue路由传参的三种方式" class="headerlink" title="vue路由传参的三种方式"></a>vue路由传参的三种方式</h3><h4 id="params传参-显示参数"><a href="#params传参-显示参数" class="headerlink" title="params传参(显示参数)"></a>params传参(显示参数)</h4><p>params传参(显示参数)又可分为<code>声明式</code>和<code>编程式</code>两种方式</p><blockquote><p>声明式router-link</p></blockquote><p>该方式是通过<code>router-link</code>组件的<code>to</code>属性实现,该方法的参数可以是一个字符串路径,或者一个描述地址的对象。使用该方式传值的时候,需要子路由提前配置好参数,例如：</p><pre><code class="js">// router/index.js&#123;  path: &#39;/child/:id&#39;,  component: Child&#125;// src/compants/father.vue&lt;router-link :to=&quot;/child/123&quot;&gt;进入Child路由&lt;/router-link&gt;</code></pre><blockquote><p>编程式 this.$router.push</p></blockquote><p>使用该方式传值的时候，同样需要子路由提前配置好参数,如下实例:</p><pre><code class="js">// router/index.js&#123;  path: &#39;/child/:id&#39;,  component: Child&#125;//父路由编程式传参(通过Onclick点击事件触发)this.$router.push(&#123;    path:&#39;/child/$&#123;id&#125;&#39;,&#125;)</code></pre><p>子路由中可以通过下面代码来获取传递的参数值</p><pre><code class="js">this.$route.params.id</code></pre><h4 id="编程式-this-router-push"><a href="#编程式-this-router-push" class="headerlink" title="编程式 this.$router.push"></a>编程式 this.$router.push</h4><p>使用该方式传值的时候，同样需要子路由提前配置好参数，不过不能再使用 :/id 来传递参数了，因为父路由中，已经使用 params 来携带参数了，例如:</p><pre><code class="js">// router/index.js&#123;  path: &#39;/child,  name: &#39;Child&#39;,  component: Child&#125;//父路由编程式传参(通过Onclick点击事件触发)this.$router.push(&#123;    name:&#39;Child&#39;,    params:&#123;        id:123    &#125;&#125;)</code></pre><p>子路由中可以通过下面代码来获取传递的参数值</p><pre><code class="js">this.$route.params.id</code></pre><h4 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h4><p>query 传参（显示参数）也可分为 声明式 和 编程式 两种方式</p><blockquote><p>声明式 router-link</p></blockquote><p>该方式也是通过 <code>router-link</code> 组件的<code>to</code>属性实现，不过使用该方式传值的时候，需要子路由提前配置好路由别名（name 属性），例如：</p><pre><code class="js">// router/index.js&#123;  path: &#39;/child,  name: &#39;Child&#39;,  component: Child&#125;//父路由组件&lt;router-link :to=&quot;&#123;name:&#39;Child&#39;,query:&#123;id:123&#125;&#125;&quot;&gt;进入Child路由&lt;/router-link&gt;</code></pre><blockquote><p>编程式 this.$router.push</p></blockquote><p>使用该方式传值的时候，同样需要子路由提前配置好路由别名（name 属性），例如：</p><pre><code class="js">// router/index.js&#123;  path: &#39;/child,  name: &#39;Child&#39;,  component: Child&#125;//父路由编程式传参(一般通过事件触发)this.$router.push(&#123;    name:&#39;Child&#39;,    query:&#123;        id:123    &#125;&#125;)</code></pre><p>子路由中可以通过下面代码来获取传递的参数值</p><pre><code class="js">this.$route.query.id</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端面试题记录&quot;&gt;&lt;a href=&quot;#前端面试题记录&quot; class=&quot;headerlink&quot; title=&quot;前端面试题记录&quot;&gt;&lt;/a&gt;前端面试题记录&lt;/h1&gt;&lt;h2 id=&quot;HTML面试题记录&quot;&gt;&lt;a href=&quot;#HTML面试题记录&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac解决跨域问题</title>
    <link href="http://example.com/2022/11/30/Mac%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/11/30/Mac%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2022-11-30T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac解决跨域问题"><a href="#Mac解决跨域问题" class="headerlink" title="Mac解决跨域问题"></a>Mac解决跨域问题</h2><p>目的：为了解决前后端联调的一些跨域问题</p><p>1: 新建文件夹(可随意起名，拿我的举例)<br><img src="../_posts/images/NewFolder.jpg" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mac解决跨域问题&quot;&gt;&lt;a href=&quot;#Mac解决跨域问题&quot; class=&quot;headerlink&quot; title=&quot;Mac解决跨域问题&quot;&gt;&lt;/a&gt;Mac解决跨域问题&lt;/h2&gt;&lt;p&gt;目的：为了解决前后端联调的一些跨域问题&lt;/p&gt;
&lt;p&gt;1: 新建文件夹(可随意起名，</summary>
      
    
    
    
    <category term="Mac" scheme="http://example.com/categories/Mac/"/>
    
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0报错笔记整理</title>
    <link href="http://example.com/2022/10/24/Vue3.0%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2022/10/24/Vue3.0%E6%8A%A5%E9%94%99%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</id>
    <published>2022-10-24T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<script src="prism.js"></script><link href="themes/prism.css" rel="stylesheet" /><h2 id="2022-10月报错笔记整理"><a href="#2022-10月报错笔记整理" class="headerlink" title="2022.10月报错笔记整理"></a>2022.10月报错笔记整理</h2><h3 id="2022-10-24-Vue报错笔记"><a href="#2022-10-24-Vue报错笔记" class="headerlink" title="2022.10.24 Vue报错笔记"></a>2022.10.24 Vue报错笔记</h3><p>今天刚开始用vue3写项目，出现了一个vue-router的bug。<br>具体报错信息如下:</p><p><img src="../_posts//images/2022.10.jpg" loading="lazy"></p><p>原因是我当时安装vue-router的时候没有用cli脚手架，手动用命令安装了vue和vue-router，导致main.js又和之前有一些不一样的地方<br>之前在写vue2.0的时候main.js内的内容是这样的:</p><pre><code class="js">import Vue from &#39;vue&#39;import Router from &#39;vue-router&#39;import LeftList from &#39;../View/LeftList.vue&#39;export const routes = (&#123;    mode: &#39;history&#39;,    linkActiveClass: &#39;is-active&#39;,    routes: [        &#123;            path: &#39;/&#39;,            redirect: &#39;/list/all&#39;,            component: LeftList,        &#125;,    ]&#125;)export const router = new Router(&#123;    Router // (缩写) 相当于 routes: routes&#125;);Vue.use(Router);</code></pre><p>写的时候不知道router4的写法，不知道怎么去注册router以及store  于是就换成了上面那种写法 项目虽然能运行但是一直就出现<code>export &#39;default&#39; (imported as &#39;Vue&#39;) was not found in &#39;vue&#39;</code>的问题。createApp是可以进行链式调用的<br>解决方案:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;themes/prism.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;h2 id=&quot;2022-10月报错笔记整理&quot;&gt;&lt;a href=&quot;#2022-10月报错笔记整理&quot; class=</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue防抖</title>
    <link href="http://example.com/2022/10/02/Vue%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://example.com/2022/10/02/Vue%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2022-10-02T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue防抖和节流"><a href="#Vue防抖和节流" class="headerlink" title="Vue防抖和节流"></a>Vue防抖和节流</h2><ul><li>防抖(debounce)</li></ul><p>在事件被触发n秒后再执行回调,如果在这n秒内又被触发,则重新计时</p><p>解释：我们在点击请求或者点击加载等过程中,只需要点击一次,但由于请求慢,点击了好多次,导致多次请求,防抖就是在点击了好多次之后的最后一次才会请求</p><p>实例:</p><pre><code class="js">data:&#123;    times: &#39;&#39;,&#125;,methods: &#123;    extract() &#123;        this.debounce(this.handle, 1000)    &#125;,    debounce(fn, delay) &#123;        if (this.times) clearTimeout(this.times)        this.times = setTimeout(() =&gt; &#123;            fn()        &#125;, delay);    &#125;,    handle() &#123;        console.log(&quot;执行了······&quot;)    &#125;,&#125;</code></pre><ul><li>节流(throttle)</li></ul><p>节流不是不让函数触发, 而是减少函数触发的频率 ，就是说在固定时间内, 函数只能执行一次，在某个时间段内暂时失效，过了这段时间后再重新激活</p><p>解释:类似于游戏中技能的CD时间。</p><p>实例:</p><pre><code class="js">data()&#123;    return&#123;        valid:false    &#125;&#125;,methods: &#123;    extract() &#123;        this.throttle(this.handle, 1000)    &#125;,    throttle(fn, wait) &#123;        if (!this.valid) &#123;        //(通行令不正确，不许进)判读如果不是false点击的话就返回一个false，并且不在向下执行。            return false        &#125;        //这里写要执行的任务，当你设置的这个到了之后，便会执行你所定义的方法。        this.valid = false        setTimeout(() =&gt; &#123;            this.valid = true            this.handle()        &#125;, wait)    &#125;,    //实现对应的逻辑    handle() &#123;        console.log(&#39;执行完毕······&#39;)    &#125;,&#125;    </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue防抖和节流&quot;&gt;&lt;a href=&quot;#Vue防抖和节流&quot; class=&quot;headerlink&quot; title=&quot;Vue防抖和节流&quot;&gt;&lt;/a&gt;Vue防抖和节流&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;防抖(debounce)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在事件被触发n秒后再执行回</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText编辑器设置中文</title>
    <link href="http://example.com/2022/07/17/Sublime%20Text%E7%BC%96%E8%BE%91%E5%99%A8%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87/"/>
    <id>http://example.com/2022/07/17/Sublime%20Text%E7%BC%96%E8%BE%91%E5%99%A8%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87/</id>
    <published>2022-07-17T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SublimeText编辑器设置中文"><a href="#SublimeText编辑器设置中文" class="headerlink" title="SublimeText编辑器设置中文"></a>SublimeText编辑器设置中文</h3><p>1:打开sublime，使用快捷键Shift+Command+P打开查找栏</p><p>2: 在搜索框中输入<code>Package Control: Install Package</code><br><img src="https://s3.bmp.ovh/imgs/2022/07/17/71c6a73d19eec39d.jpg" loading="lazy"></p><p>出现下拉选项，点击选择其中的：Package Control: Install Package</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/17/83e1158db2046325.jpg" loading="lazy"></p><p><img src="https://img2020.cnblogs.com/blog/2019812/202005/2019812-20200525111153898-1815626418.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SublimeText编辑器设置中文&quot;&gt;&lt;a href=&quot;#SublimeText编辑器设置中文&quot; class=&quot;headerlink&quot; title=&quot;SublimeText编辑器设置中文&quot;&gt;&lt;/a&gt;SublimeText编辑器设置中文&lt;/h3&gt;&lt;p&gt;1:打开su</summary>
      
    
    
    
    <category term="SublimeText" scheme="http://example.com/categories/SublimeText/"/>
    
    
    <category term="SublimeText" scheme="http://example.com/tags/SublimeText/"/>
    
  </entry>
  
  <entry>
    <title>vscode关闭自动更新</title>
    <link href="http://example.com/2022/07/13/vscode%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    <id>http://example.com/2022/07/13/vscode%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</id>
    <published>2022-07-13T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何关闭vscode的自动更新"><a href="#如何关闭vscode的自动更新" class="headerlink" title="如何关闭vscode的自动更新"></a>如何关闭vscode的自动更新</h2><p>Macbook 操作如下:<br>command + ,进入设置<br><img src="https://s3.bmp.ovh/imgs/2022/07/13/49e98906685a4afb.jpg" loading="lazy"></p><p>在打开的设置里面搜索<code>update</code>或<code>更新</code>，可能会找到很多关于更新的设置，我们在目录里面选择应用程序。可以看到有这么几个设置：</p><p><code>Update:Channel</code>或者 <code>Update:Mode</code>（配置是否从更新通道接收自动更新）此配置有三个下拉选择<code>none</code>，<code>manual</code>，<code>default</code>三个。<code>none</code>是不自动更新，<code>manual</code>是手动更新，<code>default</code>是自动更新。这里我们选择<code>none</code>或者<code>manual</code>，并重启程序便关闭了自动更新。</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/13/2bd20561894786c9.jpg" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如何关闭vscode的自动更新&quot;&gt;&lt;a href=&quot;#如何关闭vscode的自动更新&quot; class=&quot;headerlink&quot; title=&quot;如何关闭vscode的自动更新&quot;&gt;&lt;/a&gt;如何关闭vscode的自动更新&lt;/h2&gt;&lt;p&gt;Macbook 操作如下:&lt;br&gt;c</summary>
      
    
    
    
    <category term="vscode" scheme="http://example.com/categories/vscode/"/>
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>vscode查看版本</title>
    <link href="http://example.com/2022/07/13/vscode%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2022/07/13/vscode%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC/</id>
    <published>2022-07-13T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode查看版本"><a href="#vscode查看版本" class="headerlink" title="vscode查看版本"></a>vscode查看版本</h2><p>在vscode菜单栏<br>帮助 -&gt; 发行说明<br>Help-&gt;Release Notes<br><img src="https://s3.bmp.ovh/imgs/2022/07/13/0627f0518b5191ee.jpg" loading="lazy"><br><img src="https://s3.bmp.ovh/imgs/2022/07/13/29937e137fb0d88e.jpg" loading="lazy"></p><p>版本为1.69</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vscode查看版本&quot;&gt;&lt;a href=&quot;#vscode查看版本&quot; class=&quot;headerlink&quot; title=&quot;vscode查看版本&quot;&gt;&lt;/a&gt;vscode查看版本&lt;/h2&gt;&lt;p&gt;在vscode菜单栏&lt;br&gt;帮助 -&amp;gt; 发行说明&lt;br&gt;Help-&amp;g</summary>
      
    
    
    
    <category term="vscode" scheme="http://example.com/categories/vscode/"/>
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>查看vue版本和vue脚手架版本</title>
    <link href="http://example.com/2022/07/13/%E6%9F%A5%E7%9C%8Bvue%E7%89%88%E6%9C%AC%E5%92%8Cvue%E8%84%9A%E6%89%8B%E6%9E%B6%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2022/07/13/%E6%9F%A5%E7%9C%8Bvue%E7%89%88%E6%9C%AC%E5%92%8Cvue%E8%84%9A%E6%89%8B%E6%9E%B6%E7%89%88%E6%9C%AC/</id>
    <published>2022-07-13T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看vue版本和vue脚手架版本"><a href="#查看vue版本和vue脚手架版本" class="headerlink" title="查看vue版本和vue脚手架版本"></a>查看vue版本和vue脚手架版本</h2><p>打开cmd控制台：<br>输入<code>vue --version</code>（俩个-）或 <code>vue -V</code>（第二个V要大写）查看vue脚手架版本；<br>输入<code>npm list vue -g</code> 查看vue版本和vue脚手架版本；</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/13/a5243ea2a3f6d1fc.jpg" loading="lazy"></p><p>如图所示，vue版本为</p><pre><code class="bash">2.6.14</code></pre><p>vue脚手架版本为：</p><pre><code class="bash">3.2.13</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查看vue版本和vue脚手架版本&quot;&gt;&lt;a href=&quot;#查看vue版本和vue脚手架版本&quot; class=&quot;headerlink&quot; title=&quot;查看vue版本和vue脚手架版本&quot;&gt;&lt;/a&gt;查看vue版本和vue脚手架版本&lt;/h2&gt;&lt;p&gt;打开cmd控制台：&lt;br&gt;输</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vscode安装code命令</title>
    <link href="http://example.com/2022/07/11/vscode%E5%AE%89%E8%A3%85code%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/07/11/vscode%E5%AE%89%E8%A3%85code%E5%91%BD%E4%BB%A4/</id>
    <published>2022-07-11T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode安装code命令"><a href="#vscode安装code命令" class="headerlink" title="vscode安装code命令"></a>vscode安装code命令</h2><p><code>VSCode</code>提供<code>code</code>命令直接从命令行中打开文件目录，此时需要先安装 code 命令。</p><p>1:首先打开vscode</p><p>2:Mac使用快捷键<code>command + shift + p</code>,windows使用快捷键<code>ctrl+shift+p</code>然后搜索code，选择 install ‘code’ command in path。  </p><p><img src="https://s3.bmp.ovh/imgs/2022/07/11/84c98865835a0fc9.jpg" loading="lazy"></p><p>3、在命令行中运行 code [path] 打开文件目录</p><pre><code class="bash">code ./</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vscode安装code命令&quot;&gt;&lt;a href=&quot;#vscode安装code命令&quot; class=&quot;headerlink&quot; title=&quot;vscode安装code命令&quot;&gt;&lt;/a&gt;vscode安装code命令&lt;/h2&gt;&lt;p&gt;&lt;code&gt;VSCode&lt;/code&gt;提供&lt;</summary>
      
    
    
    
    <category term="vscode" scheme="http://example.com/categories/vscode/"/>
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>解决vscode下载很慢的问题</title>
    <link href="http://example.com/2022/07/11/%E8%A7%A3%E5%86%B3vscode%E4%B8%8B%E8%BD%BD%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/07/11/%E8%A7%A3%E5%86%B3vscode%E4%B8%8B%E8%BD%BD%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-11T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决vscode下载很慢的问题"><a href="#解决vscode下载很慢的问题" class="headerlink" title="解决vscode下载很慢的问题"></a>解决vscode下载很慢的问题</h2><p>1： 打开<a href="https://code.visualstudio.com/">vscode官网</a></p><p>2：点击下图中下载链接（我的电脑是Macos）</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/11/eaafc16a8a167d76.jpg" loading="lazy"></p><p>3： 下载时可以去谷歌的下载内容里面，看到正在下载的vscode，然后点击上面的链接，会发生跳转</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/11/2d49b0bf2efe1090.jpg" loading="lazy"></p><p>4.然后在谷歌浏览器上的地址上会发现这个链接，这个时候直接复制 vscode.cdn.azure.cn 替换地址上面的</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/11/da8fd03a0a004df9.jpg" loading="lazy"></p><p>然后你就会发现速度快到飞起</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/11/0e8cf7f97bf528b4.jpg" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决vscode下载很慢的问题&quot;&gt;&lt;a href=&quot;#解决vscode下载很慢的问题&quot; class=&quot;headerlink&quot; title=&quot;解决vscode下载很慢的问题&quot;&gt;&lt;/a&gt;解决vscode下载很慢的问题&lt;/h2&gt;&lt;p&gt;1： 打开&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="vscode" scheme="http://example.com/categories/vscode/"/>
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>v-model与:model的区别</title>
    <link href="http://example.com/2022/05/28/v-model%E4%B8%8E:model%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/05/28/v-model%E4%B8%8E:model%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-05-28T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h3 id="v-model与-model的区别"><a href="#v-model与-model的区别" class="headerlink" title="v-model与:model的区别"></a>v-model与:model的区别</h3><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><blockquote><p>通常用于表单上双向数据的绑定，如果除了表单其他组件使用时，起不到任何效果。它还可以实现子组件到父组件的双向数据动态绑定。<br><a href="https://cn.vuejs.org/v2/guide/forms.html">详情参考官网</a></p></blockquote><h4 id="model"><a href="#model" class="headerlink" title=":model"></a>:model</h4><blockquote><p>:model是v-bind:model的缩写。<br>只是将父组件的值传递给和子组件，但是并未实现子组件<br>和父组件之间的双向数据绑定，当然引用类型除外，子组件改变了引用类型的数据的话，父组件的数据也会跟着改变。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;v-model与-model的区别&quot;&gt;&lt;a href=&quot;#v-model与-model的区别&quot; class=&quot;headerlink&quot; title=&quot;v-model与:model的区别&quot;&gt;&lt;/a&gt;v-model与:model的区别&lt;/h3&gt;&lt;h4 id=&quot;v-mod</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>MAC升级Nodejs和Npm到最新版</title>
    <link href="http://example.com/2022/05/22/MAC%E5%8D%87%E7%BA%A7Nodejs%E5%92%8CNpm%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/"/>
    <id>http://example.com/2022/05/22/MAC%E5%8D%87%E7%BA%A7Nodejs%E5%92%8CNpm%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/</id>
    <published>2022-05-22T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac升级Node-js和Npm到最新版"><a href="#Mac升级Node-js和Npm到最新版" class="headerlink" title="Mac升级Node.js和Npm到最新版"></a>Mac升级Node.js和Npm到最新版</h3><p>1:  先查看本机node.js版本:</p><pre><code class="bash">node -v</code></pre><p>2:  清除node.js的cache:</p><pre><code class="bash">sudo npm cache clean -f</code></pre><p>3:  安装<code>n工具</code>，这个工具是专门用来管理node:</p><pre><code class="bash">sudo npm install -g n</code></pre><p>4:  安装最新版本的node.js: </p><pre><code class="bash">sudo n stable</code></pre><p>5:  再次查看本机的node.js版本:</p><pre><code class="bash">node -v</code></pre><p>6:  更新npm到最新版:</p><pre><code class="bash">sudo npm install npm@latest -g</code></pre><p>最后一步，验证：</p><pre><code class="bash">node -v#v16.15.0npm -v#8.10.0</code></pre><blockquote><p>转载自: <a href="https://www.cnblogs.com/ae6623/p/6242423.html">博客园</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Mac升级Node-js和Npm到最新版&quot;&gt;&lt;a href=&quot;#Mac升级Node-js和Npm到最新版&quot; class=&quot;headerlink&quot; title=&quot;Mac升级Node.js和Npm到最新版&quot;&gt;&lt;/a&gt;Mac升级Node.js和Npm到最新版&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="npm" scheme="http://example.com/categories/npm/"/>
    
    
    <category term="npm" scheme="http://example.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>React开发环境搭建</title>
    <link href="http://example.com/2022/05/22/React%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/05/22/React%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-05-22T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><p>安装<a href="https://nodejs.org/en/">node</a></p><p>安装create-react-app, 一个全局的命令行工具，用于简化并创建一个新的 react 项目</p><pre><code class="bash">npm install -g create-react-app</code></pre><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre><code class="bash">create-react-app react-demo #创建项目cd react-demo #进入到新的工程目录下</code></pre><p>默认生成的项目框架</p><pre><code class="bash">|-node_modules             #包管理|-public             #一般用于存放静态文件，打包时会被直接复制到输出目录(./buidle)|-src               #项目源代码  |  |-asserts         #用于存放静态资源，打包时会经过 webpack 处理  |  |-components    #组件 存放 React 组件，一般是该项目公用的无状态组件  |  |-containers       #页面视图  |  |-routes         #路由 存放需要 connect model 的路由组件  |  |-App.js         #入口文件  |  |-index         #注册路由与服务  |  |- serviceWorker       #开发配置|-package.json      #包管理代码|-.gitignore # Git忽略文件</code></pre><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><pre><code class="bash">npm run start #启动本地server用于开发</code></pre><p>在浏览器中打开 localhost://8080 查看</p><h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><pre><code class="bash">npm run build #命令执行后, 会在工程根目录下生成 build 目录</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;开发环境搭建&quot;&gt;&lt;a href=&quot;#开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;开发环境搭建&quot;&gt;&lt;/a&gt;开发环境搭建&lt;/h2&gt;&lt;p&gt;安装&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装c</summary>
      
    
    
    
    <category term="React" scheme="http://example.com/categories/React/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>VueCli3更改icon图标</title>
    <link href="http://example.com/2022/04/30/VueCli3%E4%B9%8B%E6%9B%B4%E6%94%B9icon%E5%9B%BE%E6%A0%87/"/>
    <id>http://example.com/2022/04/30/VueCli3%E4%B9%8B%E6%9B%B4%E6%94%B9icon%E5%9B%BE%E6%A0%87/</id>
    <published>2022-04-30T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VueCli3更改icon图标"><a href="#VueCli3更改icon图标" class="headerlink" title="VueCli3更改icon图标"></a>VueCli3更改icon图标</h2><blockquote><p>初次使用更改icon图标的时候，可能会根据脚手架搭建完成后的public中修改index.html中的link,如下</p></blockquote><pre><code class="bash">&lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;assets/logo/logo.png&quot;&gt;</code></pre><p>但是，会发现即使修改了之后，重新刷新也没有任何作用。</p><p>那么接下来我来讲一下搜索到的解决方法。<br>一、先将自己的icon直接替换原的图标<br>二、在根目录创建一个<code>vue.config.js</code>文件，然后写下之前</p><pre><code class="js">module.exports = &#123;    pwa: &#123;        iconPaths: &#123;            favicon32: &#39;favicon.ico&#39;,            favicon16: &#39;favicon.ico&#39;,            appleTouchIcon: &#39;favicon.ico&#39;,            maskIcon: &#39;favicon.ico&#39;,            msTileImage: &#39;favicon.ico&#39;        &#125;    &#125;&#125;</code></pre><p>记得修改完成之后需要重启项目，这样图标才会生效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VueCli3更改icon图标&quot;&gt;&lt;a href=&quot;#VueCli3更改icon图标&quot; class=&quot;headerlink&quot; title=&quot;VueCli3更改icon图标&quot;&gt;&lt;/a&gt;VueCli3更改icon图标&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;初次使用更</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue引入css</title>
    <link href="http://example.com/2022/04/30/Vue%E5%BC%95%E5%85%A5css/"/>
    <id>http://example.com/2022/04/30/Vue%E5%BC%95%E5%85%A5css/</id>
    <published>2022-04-30T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue引入css"><a href="#Vue引入css" class="headerlink" title="Vue引入css"></a>Vue引入css</h2><p>vue引用css的方法</p><p>在vue中引入外部的css文件：</p><p>在项目的src文件下，新建一个style文件夹，存放css文件。</p><h4 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h4><p>将外部的css文件放到style文件下，引入外部文件只需在main.js文件中</p><pre><code class="bash">import &#39;./style/reset.css&#39; # 清除默认样式的css文件</code></pre><h4 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h4><pre><code class="bash">&lt;style scoped&gt;  @import &#39;../assets/iconfont/iconfont.css&#39;; #这个分号一定要写，要不会报错&lt;/style&gt;</code></pre><p><code>@import CSS@</code>规则，用于从其他样式表导入样式规则。这些规则必须先于所有其他类型的规则，@charset 规则除外; 因为它不是一个嵌套语句，@import不能在条件组的规则中使用。<br>因此，用户代理可以避免为不支持的媒体类型检索资源，作者可以指定依赖媒体的@import规则。这些条件导入在URI之后指定逗号分隔的媒体查询。在没有任何媒体查询的情况下，导入是无条件的。指定所有的媒体具有相同的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue引入css&quot;&gt;&lt;a href=&quot;#Vue引入css&quot; class=&quot;headerlink&quot; title=&quot;Vue引入css&quot;&gt;&lt;/a&gt;Vue引入css&lt;/h2&gt;&lt;p&gt;vue引用css的方法&lt;/p&gt;
&lt;p&gt;在vue中引入外部的css文件：&lt;/p&gt;
&lt;p&gt;在项目</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>ES6暂时性死区</title>
    <link href="http://example.com/2022/04/28/ES6%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA/"/>
    <id>http://example.com/2022/04/28/ES6%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA/</id>
    <published>2022-04-28T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6暂时性死区"><a href="#ES6暂时性死区" class="headerlink" title="ES6暂时性死区"></a>ES6暂时性死区</h2><blockquote><p>暂时性死区是针对<code>const</code>,<code>let</code>这两个关键字而产生的概念。<br>首先变量提升这个js的基本概念无法撼动，<code>const</code>和<code>let</code>作为块级作用域也不能避免。<br>和<code>var</code>不同，这两个关键字将作用域限制在了<code>块</code>中，且规定了在该块中，由这两个关键字定义的变量已经被分配内存。<br>即其实已经<code>存在</code>了，但程序未执行到声明处时，访问该变量都会报引用错误。<br>这个时候，对于该变量来说就是’暂时性死区’，通俗来说就是该变量存在，但并未完全存在</p></blockquote><p>代码如下：</p><pre><code class="js">//情景一、if (true) &#123;  // TDZ开始  tmp = &#39;abc&#39;; // ReferenceError  console.log(tmp); // ReferenceError  let tmp; // TDZ结束  console.log(tmp); // undefined  tmp = 123;  console.log(tmp); // 123&#125;</code></pre><p>上面代码中，在let命令声明变量tmp之前，都属于变量tmp的“死区”。</p><pre><code class="js">//情景二var tmp = 123;if (true) &#123;  tmp = &#39;abc&#39;; // ReferenceError  let tmp;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES6暂时性死区&quot;&gt;&lt;a href=&quot;#ES6暂时性死区&quot; class=&quot;headerlink&quot; title=&quot;ES6暂时性死区&quot;&gt;&lt;/a&gt;ES6暂时性死区&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;暂时性死区是针对&lt;code&gt;const&lt;/code&gt;,&lt;code&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="ES6" scheme="http://example.com/tags/ES6/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端业务逻辑理解</title>
    <link href="http://example.com/2022/04/27/%E5%89%8D%E7%AB%AF%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2022/04/27/%E5%89%8D%E7%AB%AF%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E7%90%86%E8%A7%A3/</id>
    <published>2022-04-27T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端业务逻辑理解"><a href="#前端业务逻辑理解" class="headerlink" title="前端业务逻辑理解"></a>前端业务逻辑理解</h2><p>今天在学习前端开发的时候碰到一个词<code>业务逻辑</code>，理解如下:</p><blockquote><p>简单来就是在怎么做事（how to do）, 比方说你去餐馆吃饭, 你点了个炒米粉，服务员给你下单，厨房见到单后下锅给你炒，你吃完后付账。这一些列动作都可以说是业务逻辑。</p></blockquote><p><code>业务逻辑就是客户的逻辑</code></p><p>在 N 层架构的系统中，经常会提到这些名词。</p><blockquote><p>表现层（Presentation layer） 业务逻辑层（Application layer） 数据访问层（Data layer） 在一个系统开发过程中，后台做一些处理，如果成功，则跳转到 success_xxx 页面，如果失败，则跳转到 fail_xxx 页面，如果系统抛出了异常，则跳转到 5xx 页面，…… 这些属于页面逻辑。</p></blockquote><p>还有一些持久层的逻辑，也就是对数据库的操作。</p><blockquote><p>业务逻辑是核心逻辑，只关注用户的业务，比如管理系统和财务系统，需要处理的业务肯定不一样，但是页面的跳转大致相同，对于持久层的操作也差不多。如果你使用了 SSH 框架，那么 hibernate 和 struts 的代码有很大一部分可以复用。</p></blockquote><blockquote><p>业务逻辑（BL Action）不关心页面如何跳转，只是简单的返回成功，或是失败，或是异常，struts 框架根据配置文件跳转到相应的页面。</p></blockquote><blockquote><p>业务逻辑也不关心数据如何存储，是存储在文件系统，还是存储在数据库系统。是存储在MySQL，还是NoSQL。也不关系到底用没用缓存。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端业务逻辑理解&quot;&gt;&lt;a href=&quot;#前端业务逻辑理解&quot; class=&quot;headerlink&quot; title=&quot;前端业务逻辑理解&quot;&gt;&lt;/a&gt;前端业务逻辑理解&lt;/h2&gt;&lt;p&gt;今天在学习前端开发的时候碰到一个词&lt;code&gt;业务逻辑&lt;/code&gt;，理解如下:&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>样式穿透::v-deep</title>
    <link href="http://example.com/2022/04/25/%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F::v-deep/"/>
    <id>http://example.com/2022/04/25/%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F::v-deep/</id>
    <published>2022-04-25T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="样式穿透-v-deep"><a href="#样式穿透-v-deep" class="headerlink" title="样式穿透::v-deep"></a>样式穿透::v-deep</h2><p>在用到很多vue的组件库如<a href="https://youzan.github.io/vant/#/zh-CN">vant3</a>，<a href="https://element.eleme.cn/#/zh-CN">Element-ui</a>,<a href="https://vuetifyjs.com/en/">，vuetify</a>等，虽然配好了样式但是神奇的产品还是会让你改一下样式</p><p>一般情况可以直接在当前页面中写入样式：</p><pre><code class="css">&lt;style lang=&quot;scss&quot; scoped&gt;  .v-text-field.v-text-field--enclosed .v-text-field__details &#123;          margin-bottom: 8px;          padding: 0px !important;   &#125;&lt;/style&gt;</code></pre><p>这边需不需要加scoped要自行判断，有scoped限制的时候，实现组件的私有化，不对全局造成样式污染，表示当前style属性只属于当前模块。</p><p>但是知道我遇到了这种方法改不了公司的一个项目样式时，发现可以用<code>::v-deep</code>或者<code>/deep/</code>来解决，<br>注意，/deep/在vue 3.0会报错</p><p>使用方法如下：</p><pre><code class="css">::v-deep .v-text-field.v-text-field--enclosed .v-text-field__details &#123;  margin-bottom: 8px;  padding: 0px !important; &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;样式穿透-v-deep&quot;&gt;&lt;a href=&quot;#样式穿透-v-deep&quot; class=&quot;headerlink&quot; title=&quot;样式穿透::v-deep&quot;&gt;&lt;/a&gt;样式穿透::v-deep&lt;/h2&gt;&lt;p&gt;在用到很多vue的组件库如&lt;a href=&quot;https://yo</summary>
      
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发环境搭建</title>
    <link href="http://example.com/2022/04/01/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/04/01/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-01T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<p>一、安装node.js</p><p><a href="https://nodejs.org/en/download/">官网</a><br><a href="https://nodejs.org/en/download/releases/">历史版本</a></p><p><img src="https://s3.bmp.ovh/imgs/2022/04/01/71dd45c0ef3dd1b4.png" loading="lazy"></p><p>下载完毕后，可以安装node，建议不要安装在系统盘（如C：）。</p><p><img src="https://tva3.sinaimg.cn/large/0074R88yly8h0ued067t3j30h60df0tt.jpg" loading="lazy"></p><p><img src="https://tva4.sinaimg.cn/large/0074R88yly8h0uedm1vslj30h60df40i.jpg" loading="lazy"></p><p>二、设置nodejs prefix（全局）和cache（缓存）路径</p><p>1.在nodejs安装路径下，新建node_global和node_cache两个文件夹</p><p><img src="https://tva2.sinaimg.cn/large/0074R88yly8h0ueec77vrj30ha09fdh4.jpg" loading="lazy"></p><p>2.设置缓存文件夹</p><pre><code class="bash">npm config set cache &quot;D:\vueProject\nodejs\node_cache&quot;</code></pre><p>设置全局模块存放路径</p><pre><code class="bash">npm config set prefix &quot;D:\vueProject\nodejs\node_global&quot;</code></pre><p>设置成功后，之后用命令npm install XXX -g安装以后模块就在D:\vueProject\nodejs\node_global里</p><p>三、基于 Node.js 安装cnpm（淘宝镜像）</p><pre><code class="bash">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>四、设置环境变量   <strong>这非常非常非常重要！！！！！</strong><br>说明：设置环境变量可以使得住任意目录下都可以使用cnpm、vue等命令，而不需要输入全路径<br>1、鼠标右键”此电脑”，选择“属性”菜单，在弹出的“系统”对话框中左侧选择“高级系统设置”，弹出“系统属性”对话框。<br>2、修改系统变量PATH</p><p><img src="https://tva3.sinaimg.cn/large/0074R88yly8h0ueg4o0ccj30hk0iijuc.jpg" loading="lazy"></p><p><img src="https://tva4.sinaimg.cn/large/0074R88yly8h0ueginkxlj30f10fu775.jpg" loading="lazy"></p><p>3、新增系统变量NODE_PATH</p><p><img src="https://tva1.sinaimg.cn/large/0074R88yly8h0ueh2kv90j30hd0i1zn0.jpg" loading="lazy"></p><p>五、安装Vue</p><pre><code class="bash">cnpm install vue -g</code></pre><p><img src="https://tva4.sinaimg.cn/large/0074R88yly8h0uehl6adgj30r403egm6.jpg" loading="lazy"></p><p>六、安装vue命令行工具，即vue-cli 脚手架</p><pre><code class="bash">cnpm install vue-cli -g</code></pre><p><img src="https://tva2.sinaimg.cn/large/0074R88yly8h0uei3t6joj30qt08x414.jpg" loading="lazy"></p><p>七、新项目的创建<br>1.打开存放新建项目的文件夹<br>打开开始菜单，输入 CMD，或使用快捷键 win+R，输入 CMD，敲回车，弹出命令提示符。打开你将要新建的项目目录<br><img src="https://tva4.sinaimg.cn/large/0074R88yly8h0ueincm5xj30br05ddg1.jpg" loading="lazy"></p><p>2.根据模版创建新项目<br>在当前目录下输入“vue init webpack-simple 项目名称（使用英文）”。</p><pre><code class="bash">vue init webpack-simple mytest</code></pre><p><img src="https://tva4.sinaimg.cn/large/0074R88yly8h0uejfeauij30na07cwfg.jpg" loading="lazy"></p><p>初始化完成后的项目目录结构如下：<br><img src="https://tva3.sinaimg.cn/large/0074R88yly8h0uejywhzcj30iq0bodhe.jpg" loading="lazy"></p><p><img src="https://tva4.sinaimg.cn/large/0074R88yly8h0uek95or5j30hh0bvmyu.jpg" loading="lazy"></p><p>3、安装工程依赖模块</p><p>定位到mytest的工程目录下，安装该工程依赖的模块，这些模块将被安装在：mytest\node_module目录下，node_module文件夹会被新建，而且根据package.json的配置下载该项目的modules</p><pre><code class="bash">cd mytestcnpm install</code></pre><p>4、运行该项目，测试一下该项目是否能够正常工作，这种方式是用nodejs来启动。</p><pre><code class="bash">cnpm run dev</code></pre><p><img src="https://tva1.sinaimg.cn/large/0074R88yly8h0uel7t7n1j30nq09uq43.jpg" loading="lazy"></p><p><img src="https://tva3.sinaimg.cn/large/0074R88yly8h0uelmkmmdj30kt04omxa.jpg" loading="lazy"></p><p><img src="https://tva2.sinaimg.cn/large/0074R88yly8h0uelyd6rxj30mu0h4aat.jpg" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、安装node.js&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://nodejs.org/en/download/releases/&quot;&gt;历史版本&lt;/a&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Chrome报错</title>
    <link href="http://example.com/2022/03/30/Chrome%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2022/03/30/Chrome%E6%8A%A5%E9%94%99/</id>
    <published>2022-03-30T00:00:00.000Z</published>
    <updated>2023-03-16T11:47:53.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Chrome访问出现：-Slow-network-is-detected"><a href="#Chrome访问出现：-Slow-network-is-detected" class="headerlink" title="Chrome访问出现： Slow network is detected."></a>Chrome访问出现： Slow network is detected.</h3><p>Chrome报错:Slow network is detected. See <a href="https://www.chromestatus.com/feature/563695467">https://www.chromestatus.com/feature/563695467</a></p><p>百度一下 给出的解释是：</p><p>This means the network is slow, and Chrome is replacing a web font (loaded with a @font-face rule) with a local fallback.</p><p>By default, the text rendered with a web font is invisible until the font is downloaded (“<a href="https://link.csdn.net/?target=https://css-tricks.com/fout-foit-foft/">flash of invisible text</a>”). With this change, the user on a slow network could start reading right when the content is loaded instead of looking into the empty page for several seconds.</p><p>（这意味着网络速度很慢，Chrome正在用本地回退替换网络字体（加载@ font-face规则）。</p><p>默认情况下，使用Web字体呈现的文本在下载字体之前是不可见的（“不可见文本的闪烁”）。 通过此更改，慢速网络上的用户可以在加载内容时开始正确读取，而不是在几秒钟内查看空白页面。）</p><p>解决方法:</p><p>地址栏输入<code>chrome://flags/#enable-webfonts-intervention-v2</code>，并设置为<code>Disabled</code>；重启Chrome。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Chrome访问出现：-Slow-network-is-detected&quot;&gt;&lt;a href=&quot;#Chrome访问出现：-Slow-network-is-detected&quot; class=&quot;headerlink&quot; title=&quot;Chrome访问出现： Slow net</summary>
      
    
    
    
    <category term="Chrome" scheme="http://example.com/categories/Chrome/"/>
    
    
    <category term="Chrome" scheme="http://example.com/tags/Chrome/"/>
    
  </entry>
  
</feed>
